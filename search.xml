<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hadoop的调度器</title>
      <link href="/2019/08/02/Hadoop%E7%9A%84%E8%B0%83%E5%BA%A6%E5%99%A8/"/>
      <url>/2019/08/02/Hadoop%E7%9A%84%E8%B0%83%E5%BA%A6%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Hadoop的调度器总结"><a href="#Hadoop的调度器总结" class="headerlink" title="Hadoop的调度器总结"></a>Hadoop的调度器总结</h1><p>Hadoop中常见的调度器有三种，分别为： </p><h2 id="（1）默认的调度器FIFO"><a href="#（1）默认的调度器FIFO" class="headerlink" title="（1）默认的调度器FIFO"></a>（1）默认的调度器FIFO</h2><p>Hadoop中默认的调度器，它先按照作业的优先级高低，再按照到达时间的先后选择被执行的作业。</p><h2 id="（2）-计算能力调度器Capacity-Scheduler"><a href="#（2）-计算能力调度器Capacity-Scheduler" class="headerlink" title="（2） 计算能力调度器Capacity Scheduler"></a>（2） 计算能力调度器Capacity Scheduler</h2><p>支持多个队列，每个队列可配置一定的资源量，每个队列采用FIFO调度策略，为了防止同一个用户的作业独占队列中的资源，该调度器会对同一用户提交的作业所占资源量进行限定。调度时，首先按以下策略选择一个合适队列：计算每个队列中正在运行的任务数与其应该分得的计算资源之间的比值，选择一个该比值最小的队列；然后按以下策略选择该队列中一个作业：按照作业优先级和提交时间顺序选择，同时考虑用户资源量限制和内存限制。</p><blockquote><p>2.X之后变成默认的调度器了？</p></blockquote><h2 id="（3）公平调度器Fair-Scheduler"><a href="#（3）公平调度器Fair-Scheduler" class="headerlink" title="（3）公平调度器Fair Scheduler"></a>（3）公平调度器Fair Scheduler</h2><p>同计算能力调度器类似，支持多队列多用户，每个队列中的资源量可以配置，同一队列中的作业公平共享队列中所有资源，具体算法参见我的博文《Hadoop公平调度器算法解析》</p><blockquote><p>实际上，Hadoop的调度器远不止以上三种，最近，出现了很多针对新型应用的Hadoop调度器。</p></blockquote><h2 id="（4）适用于异构集群的调度器LATE"><a href="#（4）适用于异构集群的调度器LATE" class="headerlink" title="（4）适用于异构集群的调度器LATE"></a>（4）适用于异构集群的调度器LATE</h2><p>现有的Hadoop调度器都是建立在同构集群的假设前提下，具体假设如下：</p><ul><li><p>1）集群中各个节点的性能完全一样</p></li><li><p>2）对于reduce task，它的三个阶段：copy、sort和reduce，用时各占1/3</p></li><li><p>3）同一job的同类型的task是一批一批完成的，他们用时基本一样。</p></li></ul><p>现有的Hadoop调度器存在较大缺陷，主要体现在探测落后任务的算法上：如果一个task的进度落后于同类型task进度的20%，则把该task当做落后任务(这种任务决定了job的完成时间，需尽量缩短它的执行时间)，从而为它启动一个备份任务（speculative task）。如果集群异构的，对于同一个task，即使是在相同节点上的执行时间也会有较大差别，因而在异构集群中很容易产生大量的备份任务。</p><p>LATE（Longest Approximate Time to End）调度器从某种程度上解决了现有调度器的问题，它定义三个阈值：SpeculativeCap，系统中最大同时执行的speculative task数目（作者推荐值为总slot数的10%）； SlowNodeThreshold（作者推荐值为25%）：得分（分数计算方法见论文）低于该阈值的node（快节点）上不会启动speculative task；SlowTaskThreshold（作者推荐值为25%）：当task进度低于同批同类task的平均进度的SlowTaskThreshold时，会为该task启动speculative task。它的调度策略是：当一个节点出现空闲资源且系统中总的备份任务数小于SpeculativeCap时，（1）如果该节点是慢节点（节点得分高于SlowNodeThreshold），则忽略这个请求。 （2）对当前正在运行的task按估算的剩余完成时间排序 （3）选择剩余完成时间最大且进度低于SlowTaskThreshold的task，为该task启动备份任务。</p><h2 id="（5）适用于实时作业的调度器Deadline-Scheduler和Constraint-based-Scheduler"><a href="#（5）适用于实时作业的调度器Deadline-Scheduler和Constraint-based-Scheduler" class="headerlink" title="（5）适用于实时作业的调度器Deadline Scheduler和Constraint-based Scheduler"></a>（5）适用于实时作业的调度器Deadline Scheduler和Constraint-based Scheduler</h2><p>这种调度器主要用于有时间限制的作业（Deadline Job），即给作业一个deadline时间，让它在该时间内完成。实际上，这类调度器分为两种，软实时（允许作业有一定的超时）作业调度器和硬实时（作业必须严格按时完成）作业调度器。</p><p>Deadline Scheduler主要针对的是软实时作业，该调度器根据作业的运行进度和剩余时间动态调整作业获得的资源量，以便作业尽可能的在deadline时间内完成。</p><p>Constraint-based Scheduler主要针对的是硬实时作业，该调度器根据作业的deadline和当前系统中的实时作业运行情况，预测新提交的实时作业能不能在deadline时间内完成，如果不能，则将作业反馈给用户，让他重调整作业的deadline。</p><p>进阶：<a href="https://blog.csdn.net/sunnyyoona/article/details/80263078" target="_blank" rel="noopener">Hadoop Yarn上的调度器</a></p>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高性能MySQL</title>
      <link href="/2019/07/07/%E9%AB%98%E6%80%A7%E8%83%BDMySQL/"/>
      <url>/2019/07/07/%E9%AB%98%E6%80%A7%E8%83%BDMySQL/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="一、MySQL架构"><a href="#一、MySQL架构" class="headerlink" title="一、MySQL架构"></a>一、MySQL架构</h2><img src="/2019/07/07/高性能MySQL/mysql架构.png" title="mysql架构"><h3 id="A-并发控制"><a href="#A-并发控制" class="headerlink" title="A.并发控制"></a>A.并发控制</h3><ul><li>1.共享锁（shared lock，读锁）：共享的，相互不阻塞的</li><li>2.排他锁（exclusive lock，写锁）：排他的，一个写锁会阻塞其他的写锁和读锁</li></ul><h3 id="B-事务"><a href="#B-事务" class="headerlink" title="B.事务"></a>B.事务</h3><h4 id="1-事务ACID"><a href="#1-事务ACID" class="headerlink" title="1.事务ACID"></a>1.事务ACID</h4><ul><li>原子性（atomicity）一个事务必须被视为一个不可分割的最小工作单元，整个事务中所有操作要么全部提交成功，要么全部失败回滚，对于一个事务来说，不可能只执行其中的一部分操作</li><li>一致性（consistency）数据库总是从一个一致性的状态转换到另外一个一致性的状态</li><li>隔离性（isolation）一个事务所做的修改在最终提交以前，对其他事务是不可见的</li><li>持久性（durability）一旦事务提交，则其所做的修改就会永久保存到数据库中</li></ul><h4 id="2-四种隔离级别"><a href="#2-四种隔离级别" class="headerlink" title="2.四种隔离级别"></a>2.四种隔离级别</h4><ul><li>READ UNCOMMITTED（未提交读），事务中的修改，即使没有提交，对其他事务也都是可见的，事务可以读取未提交的数据，也被称为脏读（Dirty Read），这个级别会导致很多问题</li><li>READ COMMITTED（提交读），大多数数据库系统的默认隔离级别，一个事务开始时，只能“看见”已经提交的事务所做的修改，一个事务从开始直到提交之前，所做的任何修改对其他事务都是不可见的，也叫不可重复读（nonrepeatable read），有可能出现幻读（Phantom Read），指的是当某个事务在读取某个范围内的记录时，另外一个事务又在该范围内插入了新的记录，当之前的事务再次读取该范围的记录时，会产生幻行（Phantom Row）</li><li>REPEATABLE READ（可重复读），通过InnoDB和XtraDB存储引擎，是MySQL的默认事务隔离级别</li><li>SERIALIZABLE（可串行化）最高级别，通过强制事务串行执行，避免了幻读问题，会在读取的每一行数据上都加锁，可能导致大量的超时和锁争用的问题</li></ul><h4 id="3-死锁："><a href="#3-死锁：" class="headerlink" title="3.死锁："></a>3.死锁：</h4><p>指两个或多个事务在同一资源上相互占用，并请求锁定对方占用的资源，从而导致恶性循环的现象</p><h4 id="4-事务日志："><a href="#4-事务日志：" class="headerlink" title="4.事务日志："></a>4.事务日志：</h4><p>存储引擎在修改表的数据时只需要修改其内存拷贝，再把该修改行为记录到持久在硬盘上的事务日志中，而不用每次都将修改的数据本身持久到磁盘。事务日志持久以后，内存中被修改的数据在后台可以慢慢地刷回到磁盘，称为预写式日志（Write-Ahead Logging）</p><h3 id="C-多版本并发控制"><a href="#C-多版本并发控制" class="headerlink" title="C.多版本并发控制"></a>C.多版本并发控制</h3><ul><li><p>1.多版本并发控制（MVCC）是行级锁的一个变种，但是它在很多情况下避免了加锁操作，因此开销更低。虽然实现机制有所不同，但大都实现了非阻塞的读操作，写操作也只锁定必要的行</p></li><li><p>2.MVCC的实现，是通过保存数据在某个时间点的快照来实现的，有乐观和悲观两种，只在REPEATABLE READ和READ COMMITTED两个隔离级别下工作</p></li></ul><h3 id="D-MySQL的存储引擎"><a href="#D-MySQL的存储引擎" class="headerlink" title="D.MySQL的存储引擎"></a>D.MySQL的存储引擎</h3><ul><li>1.MySQL的.frm文件保存表的定义，SHOW TABLE STATUS显示表的相关信息</li><li>2.除非有非常特别的原因需要使用其他的存储引擎，否则应该优先考虑InnoDB引擎</li><li>3.不要轻易相信MyISAM比InnoDB快之类的经验之谈，这个结论并不是绝对的</li></ul><h2 id="二、MySQL基准测试"><a href="#二、MySQL基准测试" class="headerlink" title="二、MySQL基准测试"></a>二、MySQL基准测试</h2><h3 id="A-为什么需要基准测试"><a href="#A-为什么需要基准测试" class="headerlink" title="A.为什么需要基准测试"></a>A.为什么需要基准测试</h3><p>基准测试可以观察系统在不同压力下的行为，评估系统的容量，掌握哪些是重要的变化，或者观察系统如何处理不同的数据</p><h3 id="B-基准测试的策略"><a href="#B-基准测试的策略" class="headerlink" title="B.基准测试的策略"></a>B.基准测试的策略</h3><h4 id="1-两种主要的策略："><a href="#1-两种主要的策略：" class="headerlink" title="1.两种主要的策略："></a>1.两种主要的策略：</h4><ul><li>针对整个系统的整体测试（集成式full-stack）</li><li>单独测试MySQL（单组件式single-component）</li></ul><h4 id="2-测试何种指标："><a href="#2-测试何种指标：" class="headerlink" title="2.测试何种指标："></a>2.测试何种指标：</h4><ul><li>吞吐量，指单位时间内的事务处理数，常用的测试单位是每秒事务数（TPS），或每分钟事务数（TPM）</li><li>响应时间或者延迟，用于测试任务所需的整体时间，根据具体的应用，测试的时间单位可能是微秒、毫秒、秒或者分钟。通常使用百分比响应时间（percentile response time）来替代最大响应时间</li><li>并发性，需要关注的是正在工作中的并发操作，或者是同时工作中的线程数或者连接数，在测试期间记录MySQL数据库的Threads_running状态值</li><li>可扩展性，给系统增加一倍的工作，在理想情况下就能获得两倍的效果（即吞吐量增加一倍），对于容量规范非常有用，可以提供其他测试无法提供的信息，来帮助发现应用的瓶颈</li></ul><h3 id="C-基准测试方法"><a href="#C-基准测试方法" class="headerlink" title="C.基准测试方法"></a>C.基准测试方法</h3><p>1.需要避免的一些常见错误：</p><ul><li>使用真实数据的子集而不是全集</li><li>使用错误的数据分布</li><li>使用不真实的分布参数</li><li>在多用户场景中，只做单用户测试</li><li>在单服务器上测试分布式应用</li><li>与真实用户行为不匹配</li><li>反复执行同一个查询</li><li>没有检查错误</li><li>忽略了系统预热（warm up）的过程</li><li>使用默认的服务器配置</li><li>测试时间太短</li></ul><p>2.应该建立将参数和结果文档化的规范，每一轮测试都必须进行详细记录</p><p>3.基准测试应该运行足够长的时间，需要在稳定状态下测试并观察</p><p>4.在执行基准测试时，需要尽可能多地收集被测试系统的信息</p><p>5.自动化基准测试可以防止测试人员偶尔遗漏某些步骤，或者误操作，另外也有助于归档整个测试过程，可以选择shell、php、perl等，要尽可能使所有测试过程都自动化，包括装载数据、系统预热、执行测试、记录结果等</p><h2 id="三、服务器性能剖析"><a href="#三、服务器性能剖析" class="headerlink" title="三、服务器性能剖析"></a>三、服务器性能剖析</h2><h3 id="A-性能优化简介"><a href="#A-性能优化简介" class="headerlink" title="A.性能优化简介"></a>A.性能优化简介</h3><ul><li>1.性能，为完成某件任务所需要的时间度量，性能即响应时间，这是非常重要的原则</li><li>2.如果目标是降低响应时间，就需要理解为什么服务器执行查询需要这么多时间，然后去减少或者消除那些对获得查询结果来说不必要的工作。无法测量就无法有效地优化</li><li>3.性能剖析（profiling）是测量和分析时间花费在哪里的主要方法，一般有两个步骤：测量任务所花费的时间，对结果进行统计和排序</li></ul><h2 id="四、Schema与数据类型优化"><a href="#四、Schema与数据类型优化" class="headerlink" title="四、Schema与数据类型优化"></a>四、Schema与数据类型优化</h2><h3 id="A-选择优化的数据类型"><a href="#A-选择优化的数据类型" class="headerlink" title="A.选择优化的数据类型"></a>A.选择优化的数据类型</h3><p>1.数据类型的选择原则：</p><ul><li>更小的通常更好</li><li>简单就好</li><li>尽量避免NULL</li></ul><p>2.应该尽量只在对小数进行精确计算时才使用DECIMAL，使用int类型通过程序控制单位效果更好</p><p>3.使用VARCHAR合适的情况：字符串列的最大长度比平均长度大很多；列的更新很少，所以碎片不是问题；使用了像UTF-8这样复杂的字符集，每个字符都使用不同的字节数进行存储</p><p>4.CHAR适合存储很短的字符串，或者所有值都接近同一个长度；不容易产生碎片，在存储空间上更有效率</p><p>5.通常应该尽量使用TIMESTAMP，它比DATETIME空间效率更高</p><h3 id="B-MySQL-schema设计中的陷阱"><a href="#B-MySQL-schema设计中的陷阱" class="headerlink" title="B.MySQL schema设计中的陷阱"></a>B.MySQL schema设计中的陷阱</h3><p>1.不好的设计：</p><ul><li>太多的列</li><li>太多的关联</li><li>全能的枚举</li><li>变相的枚举</li><li>非此发明（Not Invent Here）的NULL</li></ul><h3 id="C-范式和反范式"><a href="#C-范式和反范式" class="headerlink" title="C.范式和反范式"></a>C.范式和反范式</h3><p>1.范式的优点：</p><ul><li>范式化的更新操作通常比反范式化要快</li><li>当数据较好地范式化时，就只有很少或者没有重复数据，所以只需要修改更少的数据</li><li>范式化的表通常更小，可以更好地放在内存里，所以执行操作会更快</li><li>很少有多余的数据意味着检索列表数据时更少需要DISTINCT或者GROUP BY语句</li></ul><p>2.范式化设计的缺点是通常需要关联</p><p>3.反范式的优点：避免关联，避免了随机I/O，能使用更有效的索引策略</p><h3 id="D-缓存表和汇总表"><a href="#D-缓存表和汇总表" class="headerlink" title="D.缓存表和汇总表"></a>D.缓存表和汇总表</h3><p>1.有时提升性能最好的方法是同一张表中保存衍生的冗余数据，有时也需要创建一张完全独立的汇总表或缓存表</p><p>2.物化视图，MySQL并不原生支持，Flexviews</p><p>3.如果应用在表中保存计数器，则在更新计数器时可能踫到并发问题，创建一张独立的表存储计数器，可以帮助避免缓存失效</p><ul><li>解决独立表并发问题可以建多行，根据id随机更新，然后统计时sum()</li><li>按天或小时可以单独建行，旧时间可定时任务合并到统一的一行</li></ul><p>E.加快ALTER TABLE操作的速度</p><p>1.两种方式：</p><ul><li>一是在一台不提供服务的机器上执行ALTER TABLE操作，然后和提供服务的主库进行切换</li><li>二是通过“影子拷贝”，创建一张新表，然后通过重命名和删表操作交换两张表及里面的数据</li></ul><p>2.快速创建MyISAM索引，先禁用索引，导入数据，然后重新启用索引</p><h2 id="五、创建高性能的索引"><a href="#五、创建高性能的索引" class="headerlink" title="五、创建高性能的索引"></a>五、创建高性能的索引</h2><h3 id="A-索引基础"><a href="#A-索引基础" class="headerlink" title="A.索引基础"></a>A.索引基础</h3><p>1.索引可以包含一个或多个列的值，如果索引包含多个列，那么列的顺序也十分重要，因为MySQL只能高效地使用索引的最左前缀列</p><p>2.ORM工具能够产生符合逻辑的、合法的查询，除非只是生成非常基本的查询，否则它很难生成适合索引的查询</p><p>3.在MySQL中，索引是在存储引擎层而不是服务器层实现的，所以，并没有统一的索引标准：不同存储引擎的索引的工作方式并不一样，也不是所有的存储引擎都支持所有类型的索引</p><p>4.B-Tree意味着所有的值都是按顺序存储的，并且每一个叶子页到根的距离相同，能够加快访问数据的速度，从索引的根节点开始进行搜索，适用于全键值、键值范围或键前缀查找</p><p>5.B-Tree索引的限制：</p><ul><li>如果不是按照索引的最左列开始查找，则无法使用索引</li><li>不能跳过索引中的列</li><li>如果查询中有某个列的范围查询，则其右边所有列都无法使用索引优化查找</li></ul><p>6.哈希索引（hash index）基于哈希表实现，只有精确匹配索引所有列的查询才有效，只有Memory引擎显式支持哈希索引</p><p>7.哈希索引的限制：</p><ul><li>哈希索引只包含哈希值和行指针，而不存储字段值，所以不能使用索引中的值来避免读取行</li><li>哈希索引数据并不是按照索引值顺序存储的，所以也就无法用于排序</li><li>哈希索引也不支持部分索引列匹配查找，因为哈希索引始终是使用索引列的全部内容来计算哈希值的</li><li>只支持等值比较查询，不支持任何范围查询</li><li>访问哈希索引的数据非常快，除非有很多哈希冲突</li><li>如果哈希冲突很多的话，一些索引维护操作的代价也会很高</li></ul><p>8.空间数据索引（R-Tree），MyISAM表支持空间索引，可以用作地理数据存储，开源数据库系统中对GIS的解决方案做得比较好的是PostgreSQL的PostGIS</p><p>9.全文索引，适用于MATCH AGAINST操作，而不是普通的WHERE条件操作</p><h3 id="B-索引的优点"><a href="#B-索引的优点" class="headerlink" title="B.索引的优点"></a>B.索引的优点</h3><h4 id="1-三个优点："><a href="#1-三个优点：" class="headerlink" title="1.三个优点："></a>1.三个优点：</h4><ul><li><p>索引大大减少了服务器需要扫描的数据量</p></li><li><p>索引可以帮助服务器避免排序和临时表</p></li><li><p>索引可以将随机I/O变为顺序I/O</p><h4 id="2-索引三星系统："><a href="#2-索引三星系统：" class="headerlink" title="2.索引三星系统："></a>2.索引三星系统：</h4></li><li><p>索引将相关的记录放到一起则获得一星</p></li><li><p>如果索引中的数据顺序和查找中的排序一致则获得二星</p></li><li><p>如果索引中的列包含了查询中需要的全部列则获得三星</p></li></ul><h4 id="C-高性能的索引策略"><a href="#C-高性能的索引策略" class="headerlink" title="C.高性能的索引策略"></a>C.高性能的索引策略</h4><p>1.独立的列：如果查询中的列不是独立的，则MySQL不会使用索引。“独立的列”是指索引列不能是表达式的一部分，也不能是函数的参数</p><p>2.前缀索引和索引选择性</p><ul><li>通常可以索引开始的部分字符，可以大大节约索引空间，但也会降低索引的选择性</li><li>索引的选择性是指，不重复的索引值（也称为基数，cardinality）和数据表的记录总数（#T）的比值，范围从1/#T到1之间，选择性越高则查询效率越高，因为选择性高的索引可以让MySQL在查找时过滤掉更多的行</li><li>MySQL无法使用前缀索引做ORDERY BY和GROUP BY，也无法做覆盖扫描</li></ul><p>3.选择合适的索引列顺序</p><ul><li>正确的索引列顺序依赖于使用该索引的查询，并且同时需要考虑如何更好地满足排序和分组的需要</li><li>在一个多列B-Tree索引中，索引列的顺序意味着索引首先按照最左列进行排序，其次是第二列</li><li>将选择性最高的列放到索引最前列</li></ul><p>4.聚簇索引：并不是一种单独的索引类型，而是一种数据存储方式</p><ul><li>最好避免随机的（不连续且值的分布范围非常大）聚簇索引，特别是对于I/O密集型的应用</li></ul><p>5.覆盖索引：如果一个索引包含（或者说覆盖）所有需要查询的字段的值，就称为覆盖索引</p><ul><li>覆盖索引必须要存储索引列的值，</li></ul><p>6.如果EXPLAIN出来的type列的值为“index”，则说明MySQL使用了索引扫描来做排序</p><p>7.压缩（前缀）索引，默认只压缩字符串，减少索引大小，对于CPU密集型应用，因为扫描需要随机查找，压缩索引在MyISAM上要慢好几倍</p><p>8.重复索引是指在相同的列上按照相同的顺序创建的相同类型的索引，应该避免这样创建重复索引</p><p>9.索引可以让查询锁定更少的行</p><h3 id="D-维护索引和表"><a href="#D-维护索引和表" class="headerlink" title="D.维护索引和表"></a>D.维护索引和表</h3><p>1.CHECK TABLE检查表是否损坏，ALTER TABLE innodb_tb1 ENGINE=INNODB;修复表</p><p>2.records_in_range()通过向存储引擎传入两个边界值获取在这个范围大概有多少条记录，对于innodb不精确<br><a href="http://3.info()返回各种类型的数据，包括索引的基数" target="_blank" rel="noopener">http://3.info()返回各种类型的数据，包括索引的基数</a></p><p>4.可以使用SHOW INDEX FROM命令来查看索引的基数</p><p>5.B-Tree索引可能会碎片化，这会降低查询的效率</p><h2 id="六、查询性能优化"><a href="#六、查询性能优化" class="headerlink" title="六、查询性能优化"></a>六、查询性能优化</h2><h3 id="A-为什么查询速度会慢"><a href="#A-为什么查询速度会慢" class="headerlink" title="A.为什么查询速度会慢"></a>A.为什么查询速度会慢</h3><p>1.如果要优化查询，实际上要优化其子任务，要么消除其中一些子任务，要么减少子任务的执行次数，要么让子任务运行得更快</p><p>2.查询的生命周期大致可以按照顺序来看：从客户端，到服务器，然后在服务器上进行解析，生成执行计划，执行，并返回结果给客户端</p><h3 id="B-慢查询基础：优化数据访问"><a href="#B-慢查询基础：优化数据访问" class="headerlink" title="B.慢查询基础：优化数据访问"></a>B.慢查询基础：优化数据访问</h3><p>1.两个分析步骤：</p><ul><li>确认应用程序是否在检索大量超过需要的数据</li><li>确认MySQL服务器层是否在分析大量超过需要的数据行</li></ul><p>2.是否向数据库请求了不需要的数据</p><ul><li>查询不需要的记录</li><li>多表关联并返回全部列</li><li>总是取出全部列</li><li>重复查询相同的数据</li></ul><p>3.MySQL是否在扫描额外的记录</p><ul><li>查询开销三个指标：响应时间、扫描的行数、返回的行数</li><li>响应时间：服务时间和排队时间之和，“快速上限估计”法</li><li>扫描的行数：较短的行的访问速度更快，内存中的行也比磁盘中的行的访问 速度要快得多</li><li>访问类型：EXPLAIN中的type列反应了访问类型；通过增加合适的索引；</li><li>三种方式应用WHERE条件：在索引中使用WHERE条件来过滤不匹配的记录；使用索引覆盖扫描（Extra中出现Using index）来返回记录，直接从索引中过滤不需要的记录并返回命中结果；从数据表中返回数据，然后过滤不满足条件的记录（Extra中出现Using Where）</li><li>需要扫描大量数据但只返回少数的行的优化技巧：使用索引覆盖扫描，改变库表结构，重写复杂的查询</li></ul><h3 id="C-重构查询的方式"><a href="#C-重构查询的方式" class="headerlink" title="C.重构查询的方式"></a>C.重构查询的方式</h3><p>1.MySQL从设计上让连接和断开连接都很轻量级，在返回一个小的查询结果方面很高效</p><p>2.切分查询，将大查询切分成小查询，每个查询功能完全一样，只完成一小部分，每次只返回一小部分查询结果，可以避免锁住很多数据、占满事务日志、耗尽系统资源、阻塞很多小的但重要的查询</p><p>3.分解关联查询优势：</p><ul><li>让缓存的效率更高</li><li>将查询分解后，执行单个查询可以减少锁的竞争</li><li>在应用层做关联，可以更容易对数据库进行拆分，更容易做到高性能和可扩展</li><li>查询本身效率也可能会有所提升</li><li>可以减少冗余记录的查询</li><li>相当于在应用中实现了哈希关联，而不是使用MySQL的嵌套循环关联</li></ul><p>4.分解关联查询的场景：</p><ul><li>当应用能够方便地缓存单个查询的结果的时候</li><li>当可以将数据分布到不同的MySQL服务器上的时候</li><li>当能够使用IN()的方式代替关联查询的时候</li><li>当查询中使用同一个数据表的时候</li></ul><h3 id="D-查询执行的基础"><a href="#D-查询执行的基础" class="headerlink" title="D.查询执行的基础"></a>D.查询执行的基础</h3><p>1.查询执行路径</p><ul><li>客户端发送一条查询给服务器</li><li>服务器先检查查询缓存，如果命中则立刻返回，否则进入下一阶段</li><li>服务器端进行SQL解析、预处理，再由优化器生成对应的执行计划</li><li>MySQL根据优化器生成的执行计划，调用存储引擎的API来执行查询</li><li>将结果返回给客户端</li></ul><p>2.MySQL客户端和服务器之间的通信协议是“半双工”的，无法将一个消息切成小块独立来发送，没法进行流量控制，一旦一端开始发生消息，另一端要接收完整个消息才能响应它</p><p>3.MySQL通常需要等所有的数据都已经发送给客户端才能释放这条查询所占用的资源，所以接收全部结果并缓存通常可以减少服务器的压力</p><p>4.查询状态，SHOW FULL PROCESSLIST命令查看：</p><ul><li>Sleep，线程正在等待客户端发送新的请求</li><li>Query，线程正在执行查询或者正在将结果发送给客户端</li><li>Locked，在MySQL服务器层，该线程正在等待表锁</li><li>Analyzing and statistics，线程正在收集存储引擎的统计信息，并生成查询的执行计划</li><li>Copying to tmp table [on disk]，线程正在执行查询，并且将其结果集都复制到一个临时表中，要么是在做GROUP BY操作，要么是文件排序操作，或者是UNION操作</li><li>Sorting result，线程正在对结果集进行排序</li><li>Sending data，线程可能在多个状态之间传送数据，或者在生成结果集，或者在向客户端返回数据</li></ul><p>5.语法解析器和预处理，通过关键字将SQL语句进行解析，并生成一棵对应的“解析树”，解析器将使用MySQL语法规则验证和解析查询，预处理器则根据一些MySQL规则进一步检查解析树是否合法</p><p>6.查询优化器，找到最好的执行计划，使用基本成本的优化器，将尝试预测一个查询使用某种执行计划时的成本，并选择其中成本最小的一个，使用SHOW STATUS LIKE ‘Last_query_cost’;查看需要多少个数据页的随机查找</p><p>7.导致MySQL查询优化器选择错误的原因：</p><ul><li>统计信息不准确，Innodb不能维护一个数据表的行数的精确统计信息</li><li>执行计划中的成本估算不等同于实际执行的成本</li><li>MySQL的最优可能和你想的最优不一样</li><li>MySQL从不考虑其他并发执行的查询</li><li>MySQL也并不是任何时候都是基于成本的优化</li><li>MySQL不会考虑不受其控制的操作的成本</li><li>优化器有时候无法去估算所有可能的执行计划</li></ul><p>8.MySQL能处理的优化类型：</p><ul><li>重新定义关联表的顺序</li><li>将外链接转化成内链接</li><li>使用等价变换规则</li><li>优化COUNT()、MIN()和MAX()，在EXPLAIN中可以看到“Select tables optimized away”</li><li>预估并转化为常数表达式，当检测到一个表达式可以转化为常数的时候，就会一直把该表达式作为常数进行优化处理</li><li>覆盖索引扫描，当索引中的列包含所有查询中需要使用的列的时候，就可以使用索引返回需要的数据，而无须查询对应的数据行</li><li>子查询优化</li><li>提前终止查询，在发现已经满足查询需求的时候，MySQL总是能够立刻终止查询</li><li>等值传播，如果两个列的值通过等式关联，那么MySQL能够把其中一个列的WHERE条件传递到另一列上</li><li>列表IN()的比较，MySQL将IN()列表中的数据先进行排序，然后通过二分查找的方式来确定列表中的值是否满足条件</li></ul><p>9.在服务器层有查询优化器，却没有保存数据和索引的统计信息，统计信息由存储引擎实现，不同的存储引擎可能会存储不同的统计信息</p><p>10.在MySQL中，每一个查询，每一个片段（包括子查询，甚至基于单表的SELECT）都可能是关联</p><p>11.对于UNION查询，MySQL先将一系列的单个查询结果放到一个临时表中，然后再重新读出临时表数据来完成UNION查询</p><p>12.MySQL对任何关联都执行“嵌套循环关联”操作，即MySQL先在一个表中循环取出单条数据，然后再嵌套到下一个表中寻找匹配的行，依次下去，直到找到所有表中匹配的行为止</p><p>13.全外连接就无法通过嵌套循环和回溯的方式完成，当发现关联表中没有找到任何匹配行的时候，则可能是因为关联恰好从一个没有任何匹配的表开始，MySQL不支持全外连接</p><p>14.关联查询优化器，会尝试在所有的关联顺序中选择一个成本最小的来生成执行计划树，如果可能，优化器会遍历每一个表然后逐个做嵌套循环计算每一棵可能的执行树的成本，最后返回一个最优的执行计划</p><p>15.如果有超过n个表的关联，那么需要检查n的阶乘关联顺序，称为“搜索空间”，搜索空间的增长速度非常快</p><p>16.无论如何排序都是一个成本很高的操作，所以从性能角度考虑，应尽可能避免排序或者尽可能避免对大量数据进行排序</p><p>17.当不能使用索引生成排序结果的时候，MySQL需要自己进行排序，如果数据量小则在内存中进行，如果数据量大则需要使用磁盘，MySQL将这个过程称为文件排序（filesort），即使完全是内存排序不需要任何磁盘文件时也是如此</p><h3 id="E-MySQL查询优化器的局限性"><a href="#E-MySQL查询优化器的局限性" class="headerlink" title="E.MySQL查询优化器的局限性"></a>E.MySQL查询优化器的局限性</h3><p>1.关联子查询：MySQL的子查询实现得非常糟糕，最糟糕的一类查询是WHERE条件中包含IN()的子查询语句，使用GROUP_CONCAT()在IN()中构造一个由逗号分隔的列表，或者使用EXISTS()来改写</p><p>2.UNION的限制：有时，MySQL无法将限制条件从外层“下推”到内层，这使得原本能够限制部分返回结果的条件无法应用到内层查询的优化上</p><p>3.MySQL无法利用多核特性来并行执行查询</p><p>4.MySQL不支持哈希关联，MariaDB已经实现了哈希关联</p><p>5.MySQL不支持松散索引扫描，5.0后版本在分组查询中需要找到分组的最大值和最小值时可以使用松散索引扫描</p><p>6.对于MIN()和MAX()查询，MySQL的优化做得并不好</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis简介</title>
      <link href="/2019/07/04/Redis%E7%AE%80%E4%BB%8B/"/>
      <url>/2019/07/04/Redis%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="Redis-简介"><a href="#Redis-简介" class="headerlink" title="Redis 简介"></a>Redis 简介</h3><p>Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。</p><p>Redis 与其他 key - value 缓存产品有以下三个特点：</p><ul><li>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li><li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li><li>Redis支持数据的备份，即master-slave模式的数据备份。</li></ul><h3 id="Redis-优势"><a href="#Redis-优势" class="headerlink" title="Redis 优势"></a>Redis 优势</h3><ul><li>性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。</li><li>丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li><li>原子 – Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。</li><li>丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。</li></ul><p>Redis与其他key-value存储有什么不同？</p><ul><li>Redis有着更为复杂的数据结构并且提供对他们的原子性操作，这是一个不同于其他数据库的进化路径。Redis的数据类型都是基于基本数据结构的同时对程序员透明，无需进行额外的抽象。</li><li>Redis运行在内存中但是可以持久化到磁盘，所以在对不同数据集进行高速读写时需要权衡内存，因为数据量不能大于硬件内存。在内存数据库方面的另一个优点是，相比在磁盘上相同的复杂的数据结构，在内存中操作起来非常简单，这样Redis可以做很多内部复杂性很强的事情。同时，在磁盘格式方面他们是紧凑的以追加的方式产生的，因为他们并不需要进行随机访问。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【工具篇】OpenJDK项目CodeTools</title>
      <link href="/2019/07/03/%E3%80%90%E5%B7%A5%E5%85%B7%E7%AF%87%E3%80%91OpenJDK%E9%A1%B9%E7%9B%AECodeTools/"/>
      <url>/2019/07/03/%E3%80%90%E5%B7%A5%E5%85%B7%E7%AF%87%E3%80%91OpenJDK%E9%A1%B9%E7%9B%AECodeTools/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="OpenJDK-项目-Code-Tools"><a href="#OpenJDK-项目-Code-Tools" class="headerlink" title="OpenJDK 项目 Code Tools"></a>OpenJDK 项目 Code Tools</h3><h4 id="字节码汇编器反汇编器-ASMTools-Download"><a href="#字节码汇编器反汇编器-ASMTools-Download" class="headerlink" title="字节码汇编器反汇编器 ASMTools(Download)"></a>字节码汇编器反汇编器 <a href="https://wiki.openjdk.java.net/display/CodeTools/asmtools" target="_blank" rel="noopener">ASMTools</a>(<a href="https://adopt-openjdk.ci.cloudbees.com/view/OpenJDK/job/asmtools/lastSuccessfulBuild/artifact/asmtools-6.0.tar.gz" target="_blank" rel="noopener">Download</a>)</h4><p>ASMTools 的反汇编以及汇编操作所对应的命令分别为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp /path/to/asmtools.jar org.openjdk.asmtools.jdis.Main Foo.class &gt; Foo.jasm</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp /path/to/asmtools.jar org.openjdk.asmtools.jasm.Main Foo.jasm</span><br></pre></td></tr></table></figure><h4 id="JOL-Download"><a href="#JOL-Download" class="headerlink" title="JOL(Download)"></a><a href="http://openjdk.java.net/projects/code-tools/jol/" target="_blank" rel="noopener">JOL</a>(<a href="http://central.maven.org/maven2/org/openjdk/jol/jol-cli/0.9/jol-cli-0.9-full.jar" target="_blank" rel="noopener">Download</a>)</h4><p>JOL 可用于查阅 Java 虚拟机中对象的内存分布，具体可通过如下两条指令来实现。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ java -jar /path/to/jol-cli-0.9-full.jar internals java.util.HashMap</span><br><span class="line">$ java -jar /path/to/jol-cli-0.9-full.jar estimates java.util.HashMap</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>supervisor的安装和使用</title>
      <link href="/2019/05/13/supervisor%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/05/13/supervisor%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h5 id="在ubuntu-16-04上安装"><a href="#在ubuntu-16-04上安装" class="headerlink" title="在ubuntu 16.04上安装"></a>在ubuntu 16.04上安装</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Uninstall old version</span></span><br><span class="line">$ sudo apt-get install supervisor</span><br></pre></td></tr></table></figure><h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><blockquote><p>Supervisor 是一个 C/S 模型的程序，supervisord 是 server 端，supervisorctl 是 client 端。</p></blockquote><h4 id="supervisord"><a href="#supervisord" class="headerlink" title="supervisord"></a>supervisord</h4><h6 id="下面介绍-supervisord-配置方法。supervisord-的配置文件默认位于-etc-supervisord-conf，内容如下（-后面为注释）："><a href="#下面介绍-supervisord-配置方法。supervisord-的配置文件默认位于-etc-supervisord-conf，内容如下（-后面为注释）：" class="headerlink" title="下面介绍 supervisord 配置方法。supervisord 的配置文件默认位于 /etc/supervisord.conf，内容如下（;后面为注释）："></a>下面介绍 supervisord 配置方法。supervisord 的配置文件默认位于 /etc/supervisord.conf，内容如下（;后面为注释）：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">; supervisor config file</span><br><span class="line"></span><br><span class="line">[unix_http_server]</span><br><span class="line">file=/var/run/supervisor.sock   ; (the path to the socket file) UNIX socket 文件，supervisorctl 会使用</span><br><span class="line">chmod=0700                       ; sockef file mode (default 0700) socket 文件的 mode，默认是 0700</span><br><span class="line"></span><br><span class="line">[supervisord]</span><br><span class="line">logfile=/var/log/supervisor/supervisord.log ; (main log file;default $CWD/supervisord.log) 日志文件，默认是 $CWD/supervisord.log</span><br><span class="line">pidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid) pid 文件</span><br><span class="line">childlogdir=/var/log/supervisor            ; (&apos;AUTO&apos; child log dir, default $TEMP)</span><br><span class="line"></span><br><span class="line">; the below section must remain in the config file for RPC</span><br><span class="line">; (supervisorctl/web interface) to work, additional interfaces may be</span><br><span class="line">; added by defining them in separate rpcinterface: sections</span><br><span class="line">[rpcinterface:supervisor]</span><br><span class="line">supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface</span><br><span class="line"></span><br><span class="line">[supervisorctl]</span><br><span class="line">serverurl=unix:///var/run/supervisor.sock ; use a unix:// URL  for a unix socket 通过 UNIX socket 连接 supervisord，路径与 unix_http_server 部分的 file 一致</span><br><span class="line"></span><br><span class="line">; 在增添需要管理的进程的配置文件时，推荐写到 `/etc/supervisor/conf.d/` 目录下，所以 `include` 项，就需要像如下配置。</span><br><span class="line">; 包含其他的配置文件</span><br><span class="line">[include]</span><br><span class="line">files = /etc/supervisor/conf.d/*.conf ; 引入 `/etc/supervisor/conf.d/` 下的 `.conf` 文件</span><br></pre></td></tr></table></figure><h5 id="program-配置"><a href="#program-配置" class="headerlink" title="program 配置"></a>program 配置</h5><h6 id="program-的配置文件就写在，supervisord-配置中-include-项的路径下：-etc-supervisor-conf-d-，然后-program-的配置文件命名规则推荐：app-name-conf"><a href="#program-的配置文件就写在，supervisord-配置中-include-项的路径下：-etc-supervisor-conf-d-，然后-program-的配置文件命名规则推荐：app-name-conf" class="headerlink" title="program 的配置文件就写在，supervisord 配置中 include 项的路径下：/etc/supervisor/conf.d/，然后 program 的配置文件命名规则推荐：app_name.conf"></a>program 的配置文件就写在，supervisord 配置中 include 项的路径下：/etc/supervisor/conf.d/，然后 program 的配置文件命名规则推荐：app_name.conf</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[program:app] ; 程序名称，在 supervisorctl 中通过这个值来对程序进行一系列的操作</span><br><span class="line">autorestart=True      ; 程序异常退出后自动重启</span><br><span class="line">autostart=True        ; 在 supervisord 启动的时候也自动启动</span><br><span class="line">redirect_stderr=True  ; 把 stderr 重定向到 stdout，默认 false</span><br><span class="line">environment=PATH=&quot;/home/app_env/bin&quot;  ; 可以通过 environment 来添加需要的环境变量，一种常见的用法是使用指定的 virtualenv 环境</span><br><span class="line">command=python server.py  ; 启动命令，与手动在命令行启动的命令是一样的</span><br><span class="line">user=ubuntu           ; 用哪个用户启动</span><br><span class="line">directory=/home/app/  ; 程序的启动目录</span><br><span class="line">stdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB</span><br><span class="line">stdout_logfile_backups = 20     ; stdout 日志文件备份数</span><br><span class="line">; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）</span><br><span class="line">stdout_logfile = /data/logs/usercenter_stdout.log</span><br></pre></td></tr></table></figure><h3 id="supervisorctl-操作"><a href="#supervisorctl-操作" class="headerlink" title="supervisorctl 操作"></a>supervisorctl 操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 使用命令进入supervisor进入客户端</span><br><span class="line">sudo supervisorctl</span><br><span class="line"># 重读配置文件</span><br><span class="line">sudo supervisorctl reread</span><br><span class="line"># 更新</span><br><span class="line">sudo supervisorctl update</span><br></pre></td></tr></table></figure><h5 id="在supervisor客户端中"><a href="#在supervisor客户端中" class="headerlink" title="在supervisor客户端中:"></a>在supervisor客户端中:</h5><ul><li>help # 查看帮助</li><li>status # 查看程序状态</li><li>stop program_name # 关闭 指定的程序</li><li>start program_name # 启动 指定的程序</li><li>restart program_name # 重启 指定的程序</li><li>tail -f program_name # 查看 该程序的日志</li></ul>]]></content>
      
      
      <categories>
          
          <category> 系统命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 系统命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker相关使用</title>
      <link href="/2019/04/03/docker%E7%9B%B8%E5%85%B3%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/04/03/docker%E7%9B%B8%E5%85%B3%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h5 id="在ubuntu-16-04上安装"><a href="#在ubuntu-16-04上安装" class="headerlink" title="在ubuntu 16.04上安装"></a>在ubuntu 16.04上安装</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Uninstall old version</span></span><br><span class="line">$ sudo apt-get remove docker docker-engine docker.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># Update the apt package index</span></span><br><span class="line">$ sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install packages to allow apt to use a repository over HTTPS</span></span><br><span class="line">$ sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    software-properties-common</span><br><span class="line">    </span><br><span class="line"><span class="comment"># Add Docker’s official GPG key</span></span><br><span class="line">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"></span><br><span class="line"><span class="comment"># Verify that you now have the key with the fingerprint 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88,</span></span><br><span class="line"><span class="comment"># by searching for the last 8 characters of the fingerprint.</span></span><br><span class="line">$ sudo apt-key fingerprint 0EBFCD88</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use the following command to set up the stable repository.</span></span><br><span class="line">$ sudo add-apt-repository \</span><br><span class="line">   <span class="string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">   <span class="variable">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">   stable"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Update the apt package index.</span></span><br><span class="line">$ sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment">#Install the latest version of Docker CE, or go to the next step to install a specific version</span></span><br><span class="line">$ sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure><h5 id="列出可用版本-并且下载"><a href="#列出可用版本-并且下载" class="headerlink" title="列出可用版本,并且下载"></a>列出可用版本,并且下载</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># List the versions available in your repo</span></span><br><span class="line">$ apt-cache madison docker-ce</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install a specific version by its fully qualified package name, which is package name (docker-ce) “=” version string (2nd column)</span></span><br><span class="line">$ sudo apt-get install docker-ce=&lt;VERSION&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Verify that Docker CE is installed correctly by running the hello-world image.</span></span><br><span class="line">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## List Docker CLI commands</span></span><br><span class="line">docker</span><br><span class="line">docker container --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Display Docker version and info</span></span><br><span class="line">docker --version</span><br><span class="line">docker version</span><br><span class="line">docker info</span><br><span class="line"></span><br><span class="line"><span class="comment">## Execute Docker image</span></span><br><span class="line">docker run hello-world</span><br><span class="line"></span><br><span class="line"><span class="comment">## List Docker images</span></span><br><span class="line">docker image ls</span><br><span class="line"></span><br><span class="line"><span class="comment">## List Docker containers (running, all, all in quiet mode)</span></span><br><span class="line">docker container ls</span><br><span class="line">docker container ls --all</span><br><span class="line">docker container ls -aq</span><br></pre></td></tr></table></figure><h3 id="Containers"><a href="#Containers" class="headerlink" title="Containers"></a>Containers</h3><h5 id="为您的环境提供快速测试运行，以确保您完成所有设置"><a href="#为您的环境提供快速测试运行，以确保您完成所有设置" class="headerlink" title="为您的环境提供快速测试运行，以确保您完成所有设置"></a>为您的环境提供快速测试运行，以确保您完成所有设置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><h5 id="在docker中-这些便携的镜像是由Dockerfile定义"><a href="#在docker中-这些便携的镜像是由Dockerfile定义" class="headerlink" title="在docker中,这些便携的镜像是由Dockerfile定义"></a>在docker中,这些便携的镜像是由Dockerfile定义</h5><p><strong>example</strong></p><blockquote><p>以下三个文件需要放在同一个文件夹</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># Dockerfile</span><br><span class="line"># Use an official Python runtime as a parent image</span><br><span class="line">FROM python:2.7-slim</span><br><span class="line"></span><br><span class="line"># Set the working directory to /app</span><br><span class="line">WORKDIR /app</span><br><span class="line"></span><br><span class="line"># Copy the current directory contents into the container at /app</span><br><span class="line">COPY . /app</span><br><span class="line"></span><br><span class="line"># Install any needed packages specified in requirements.txt</span><br><span class="line">RUN pip install --trusted-host pypi.python.org -r requirements.txt</span><br><span class="line"></span><br><span class="line"># Make port 80 available to the world outside this container</span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line"># Define environment variable</span><br><span class="line">ENV NAME World</span><br><span class="line"></span><br><span class="line"># Run app.py when the container launches</span><br><span class="line">CMD [&quot;python&quot;, &quot;app.py&quot;]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 其中requirements.txt是python的依赖文件的包</span><br><span class="line">Flask</span><br><span class="line">Redis</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># app.py</span><br><span class="line">from flask import Flask</span><br><span class="line">from redis import Redis, RedisError</span><br><span class="line">import os</span><br><span class="line">import socket</span><br><span class="line"></span><br><span class="line"># Connect to Redis</span><br><span class="line">redis = Redis(host=&quot;redis&quot;, db=0, socket_connect_timeout=2, socket_timeout=2)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&quot;/&quot;)</span><br><span class="line">def hello():</span><br><span class="line">    try:</span><br><span class="line">        visits = redis.incr(&quot;counter&quot;)</span><br><span class="line">    except RedisError:</span><br><span class="line">        visits = &quot;&lt;i&gt;cannot connect to Redis, counter disabled&lt;/i&gt;&quot;</span><br><span class="line"></span><br><span class="line">    html = &quot;&lt;h3&gt;Hello &#123;name&#125;!&lt;/h3&gt;&quot; \</span><br><span class="line">           &quot;&lt;b&gt;Hostname:&lt;/b&gt; &#123;hostname&#125;&lt;br/&gt;&quot; \</span><br><span class="line">           &quot;&lt;b&gt;Visits:&lt;/b&gt; &#123;visits&#125;&quot;</span><br><span class="line">    return html.format(name=os.getenv(&quot;NAME&quot;, &quot;world&quot;), hostname=socket.gethostname(), visits=visits)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    app.run(host=&apos;0.0.0.0&apos;, port=80)</span><br></pre></td></tr></table></figure><blockquote><p>上面的例子,由于没有docker中没有安装redis本身,所以所以会如期的一样报错,但是也足以作为一个例子使用</p></blockquote><h5 id="Build-the-app"><a href="#Build-the-app" class="headerlink" title="Build the app"></a>Build the app</h5><ol><li><p>使用上面的例子构建一个app,先查看当前目录的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line">Dockerfileapp.pyrequirements.txt</span><br></pre></td></tr></table></figure></li><li><p>使用命令构建app</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t friendlyhello .</span><br></pre></td></tr></table></figure></li><li><p>查看docker的镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls</span><br><span class="line"></span><br><span class="line">REPOSITORY            TAG                 IMAGE ID</span><br><span class="line">friendlyhello         latest              326387cea398</span><br></pre></td></tr></table></figure></li></ol><h5 id="Run-the-app"><a href="#Run-the-app" class="headerlink" title="Run the app"></a>Run the app</h5><p>运行应用程序，使用-p将计算机的端口4000映射到容器的已发布端口80</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 4000:80 friendlyhello</span><br></pre></td></tr></table></figure><p>使用 <strong>curl</strong> 测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://localhost:4000</span><br><span class="line"></span><br><span class="line">&lt;h3&gt;Hello World!&lt;/h3&gt;&lt;b&gt;Hostname:&lt;/b&gt; 8fc990912a14&lt;br/&gt;&lt;b&gt;Visits:&lt;/b&gt; &lt;i&gt;cannot connect to Redis, counter disabled&lt;/i&gt;</span><br></pre></td></tr></table></figure><p>现在让我们以分离模式在后台运行应用程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 4000:80 friendlyhello</span><br></pre></td></tr></table></figure><p>使用docker container stop来结束进程，使用CONTAINER ID:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container stop 1fa4ab2cf395</span><br></pre></td></tr></table></figure><h5 id="Share-your-image"><a href="#Share-your-image" class="headerlink" title="Share your image"></a>Share your image</h5><h6 id="Log-in-with-your-Docker-ID"><a href="#Log-in-with-your-Docker-ID" class="headerlink" title="Log in with your Docker ID"></a>Log in with your Docker ID</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker login</span><br></pre></td></tr></table></figure><h6 id="Tag-the-image"><a href="#Tag-the-image" class="headerlink" title="Tag the image"></a>Tag the image</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 将某一个镜像放在某个用户的repository下面,并且打上标签</span><br><span class="line">docker tag image username/repository:tag</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># For example:</span><br><span class="line"># 添加标签</span><br><span class="line">docker tag friendlyhello vallzey/get-started:part2</span><br><span class="line"># 去除标签</span><br><span class="line">docker image rm vallzey/get-started:part2</span><br></pre></td></tr></table></figure><h6 id="Publish-the-image"><a href="#Publish-the-image" class="headerlink" title="Publish the image"></a>Publish the image</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push username/repository:tag</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># For example:</span><br><span class="line">docker push vallzey/get-started:part2</span><br></pre></td></tr></table></figure><p>现在可以在任何机上运行这个image,如果本地没有的话,系统就会从网上下载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 4000:80 username/repository:tag</span><br></pre></td></tr></table></figure><h5 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">docker build -t friendlyhello .  # Create image using this directory&apos;s Dockerfile</span><br><span class="line">docker run -p 4000:80 friendlyhello  # Run &quot;friendlyname&quot; mapping port 4000 to 80</span><br><span class="line">docker run -d -p 4000:80 friendlyhello         # Same thing, but in detached mode</span><br><span class="line">docker container ls                                # List all running containers</span><br><span class="line">docker container ls -a             # List all containers, even those not running</span><br><span class="line">docker container stop &lt;hash&gt;           # Gracefully stop the specified container</span><br><span class="line">docker container kill &lt;hash&gt;         # Force shutdown of the specified container</span><br><span class="line">docker container rm &lt;hash&gt;        # Remove specified container from this machine</span><br><span class="line">docker container rm $(docker container ls -a -q)         # Remove all containers</span><br><span class="line">docker image ls -a                             # List all images on this machine</span><br><span class="line">docker image rm &lt;image id&gt;            # Remove specified image from this machine</span><br><span class="line">docker image rm $(docker image ls -a -q)   # Remove all images from this machine</span><br><span class="line">docker login             # Log in this CLI session using your Docker credentials</span><br><span class="line">docker tag &lt;image&gt; username/repository:tag  # Tag &lt;image&gt; for upload to registry</span><br><span class="line">docker push username/repository:tag            # Upload tagged image to registry</span><br><span class="line">docker run username/repository:tag                   # Run image from a registry</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 系统命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 系统命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac安装测试redis</title>
      <link href="/2019/03/14/mac%E5%AE%89%E8%A3%85%E6%B5%8B%E8%AF%95redis/"/>
      <url>/2019/03/14/mac%E5%AE%89%E8%A3%85%E6%B5%8B%E8%AF%95redis/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h3><ul><li>Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。</li><li>Redis运行在内存中，同时支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li><li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li></ul><h3 id="Why-Redis"><a href="#Why-Redis" class="headerlink" title="Why Redis?"></a>Why Redis?</h3><p>作为key-value型数据库，Redis:</p><ul><li>性能极高(Redis能读的速度是110000次/s,写的速度是81000次/s)</li><li>丰富的数据类型</li><li>原子(Redis的所有操作都是原子性的)</li></ul><h3 id="macOS上下载Redis"><a href="#macOS上下载Redis" class="headerlink" title="macOS上下载Redis"></a>macOS上下载Redis</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install redis</span><br></pre></td></tr></table></figure><p>配置Redis<br>安装完成后redis默认的配置文件redis.conf位于/usr/local/etc</p><p>同时，redis-sentinel.conf也在这里。</p><blockquote><p>如果启动时不指定配置文件,redis会使用程序中内置的默认配置.但是只有在开发和测试阶段才考虑使用内置的默认配置，正式环境最好还是提供配置文件，并且一般命名为redis.conf</p></blockquote><p>启动Redis</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server /usr/local/etc/redis.conf</span><br></pre></td></tr></table></figure><blockquote><p>redis服务器启动成功，并在监听6379端口的网络连接。</p></blockquote><p>如果想要检测redis服务器是否启动，需要重新打开一个终端窗口，输入命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis-cli ping</span><br><span class="line"></span><br><span class="line"># PONG 说明正常</span><br></pre></td></tr></table></figure><p>关闭Redis</p><ol><li>在执行启动命令的窗口使用ctrl+c</li><li>在另外一个终端窗口执行：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli shutdown</span><br></pre></td></tr></table></figure></li></ol><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><a href="https://www.runoob.com/redis/redis-conf.html" target="_blank" rel="noopener">https://www.runoob.com/redis/redis-conf.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java序列化</title>
      <link href="/2019/03/07/Java%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2019/03/07/Java%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="什么是序列化"><a href="#什么是序列化" class="headerlink" title="什么是序列化"></a>什么是序列化</h2><p>我们的对象并不只是存在内存中，还需要传输网络，或者保存起来下次再加载出来用，所以需要Java序列化技术。</p><p>Java序列化技术正是将对象转变成一串由二进制字节组成的数组，可以通过将二进制数据保存到磁盘或者传输网络，磁盘或者网络接收者可以在对象的属类的模板上来反序列化类的对象，达到对象持久化的目的。</p><h2 id="怎么序列化一个对象？"><a href="#怎么序列化一个对象？" class="headerlink" title="怎么序列化一个对象？"></a>怎么序列化一个对象？</h2><p>要序列化一个对象，这个对象所在类就必须实现Java序列化的接口：java.io.Serializable。</p><h4 id="类添加序列化接口"><a href="#类添加序列化接口" class="headerlink" title="类添加序列化接口"></a>类添加序列化接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">8475669200846811112L</span>;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> + <span class="string">"username='"</span> + username + <span class="string">'\''</span> + <span class="string">", address='"</span> + address + <span class="string">'\''</span> + <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="序列化-反序列化"><a href="#序列化-反序列化" class="headerlink" title="序列化/反序列化"></a>序列化/反序列化</h4><p>可以借助commons-lang3⼯具包⾥⾯的类实现对象的序列化及反序列化，你没有必要⾃⼰写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.SerializationUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">"Java"</span>);</span><br><span class="line">        user.setAddress(<span class="string">"China"</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = SerializationUtils.serialize(user);</span><br><span class="line">        User u = SerializationUtils.deserialize(bytes);</span><br><span class="line">        System.out.println(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User&#123;username=&apos;Java&apos;, address=&apos;China&apos;&#125;</span><br></pre></td></tr></table></figure><h3 id="序列化注意事项"><a href="#序列化注意事项" class="headerlink" title="序列化注意事项"></a>序列化注意事项</h3><ul><li><p>序列化对象必须实现序列化接口。</p></li><li><p>序列化对象里面的属性是对象的话也要实现序列化接口。</p></li><li><p>类的对象序列化后，类的序列化ID不能轻易修改，不然反序列化会失败。</p></li><li><p>类的对象序列化后，类的属性有增加或者删除不会影响序列化，只是值会丢失。</p></li><li><p>如果父类序列化了，子类会继承父类的序列化，子类无需添加序列化接口。</p></li><li><p>如果父类没有序列化，子类序列化了，子类中的属性能正常序列化，但父类的属性会丢失，不能序列化。</p></li><li><p>用Java序列化的二进制字节数据只能由Java反序列化，不能被其他语言反序列化。如果要进行前后端或者不同语言之间的交互一般需要将对象转变成Json/Xml通用格式的数据，再恢复原来的对象。</p></li><li><p>如果某个字段不想序列化，在该字段前加上transient关键字即可。</p></li></ul><h3 id="transient-关键字总结"><a href="#transient-关键字总结" class="headerlink" title="transient 关键字总结"></a>transient 关键字总结</h3><ul><li><p>transient修饰的变量不能被序列化；</p></li><li><p>transient只作用于实现 Serializable 接口；</p></li><li><p>transient只能用来修饰普通成员变量字段；</p></li><li><p>不管有没有 transient 修饰，静态变量都不能被序列化；</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh相关笔记</title>
      <link href="/2019/02/22/ssh%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/02/22/ssh%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="安装启动"><a href="#安装启动" class="headerlink" title="安装启动"></a>安装启动</h3><blockquote><p>自行查找</p></blockquote><h3 id="关于私钥登录"><a href="#关于私钥登录" class="headerlink" title="关于私钥登录"></a>关于私钥登录</h3><h6 id="1、使用ssh-kegen命令生成公私钥"><a href="#1、使用ssh-kegen命令生成公私钥" class="headerlink" title="1、使用ssh-kegen命令生成公私钥"></a>1、使用ssh-kegen命令生成公私钥</h6><p>可以看到/root/.ssh目录下已经生成了对应的公私钥对</p><p>2、将公钥信息写入到私钥登录时的校验文件</p><p>通过查看/etc/ssh/sshd_config中的配置信息发现此校验文件默认情况下是当前用户的.ssh目录下的authorized_keys</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【工具篇】javap命令</title>
      <link href="/2019/02/07/%E3%80%90%E5%B7%A5%E5%85%B7%E7%AF%87%E3%80%91javap%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/02/07/%E3%80%90%E5%B7%A5%E5%85%B7%E7%AF%87%E3%80%91javap%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="javap命令"><a href="#javap命令" class="headerlink" title="javap命令"></a>javap命令</h3><p>默认情况下 javap 会打印所有非私有的字段和方法</p><ul><li>-p : 将打印私有的字段和方法</li><li>-v : 尽可能地打印所有信息<h4 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h4><h5 id="1-创建并编译Foo类"><a href="#1-创建并编译Foo类" class="headerlink" title="1 创建并编译Foo类"></a>1 创建并编译Foo类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> tryBlock;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> catchBlock;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> finallyBlock;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> methodExit;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      tryBlock = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      catchBlock = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      finallyBlock = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    methodExit = <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="2-运行以下命令"><a href="#2-运行以下命令" class="headerlink" title="2 运行以下命令"></a>2 运行以下命令</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javap -p -v Foo</span><br></pre></td></tr></table></figure><h5 id="3-查看分析结果"><a href="#3-查看分析结果" class="headerlink" title="3 查看分析结果"></a>3 查看分析结果</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line">$ javac Foo.java</span><br><span class="line">$ javap -p -v Foo</span><br><span class="line">Classfile ../Foo.class</span><br><span class="line">  Last modified ..; size 541 bytes</span><br><span class="line">  MD5 checksum 3828cdfbba56fea1da6c8d94fd13b20d</span><br><span class="line">  Compiled from <span class="string">"Foo.java"</span></span><br><span class="line">public class Foo</span><br><span class="line"></span><br><span class="line">  <span class="comment"># class 文件的版本号</span></span><br><span class="line">  <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">  class 文件的版本号指的是编译生成该 class 文件时所用的 JRE 版本。</span></span><br><span class="line"><span class="string">  由较新的 JRE 版本中的 javac 编译而成的 class 文件，不能在旧版本的 JRE 上跑，</span></span><br><span class="line"><span class="string">  否则，会出现如下异常信息。</span></span><br><span class="line"><span class="string">  （Java 8 对应的版本号为 52，Java 10 对应的版本号为 54。）</span></span><br><span class="line"><span class="string">  '</span><span class="string">''</span></span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: 54</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 该类的访问权限</span></span><br><span class="line">  <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">  类的访问权限通常为 ACC_ 开头的常量。</span></span><br><span class="line"><span class="string">  具体每个常量的意义可以查阅 Java 虚拟机规范 4.1 小节。</span></span><br><span class="line"><span class="string">  https://docs.oracle.com/javase/specs/jvms/se10/html/jvms-4.html#jvms-4.1</span></span><br><span class="line"><span class="string">  '</span><span class="string">''</span></span><br><span class="line">  flags: (0x0021) ACC_PUBLIC, ACC_SUPER</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 该类以及父类的名字</span></span><br><span class="line">  this_class: <span class="comment">#7                          // Foo</span></span><br><span class="line">  super_class: <span class="comment">#8                         // java/lang/Object</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 所实现接口、字段、方法以及属性的数目。</span></span><br><span class="line">  <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">  这里属性指的是 class 文件所携带的辅助信息，比如该 class 文件的源文件的名称。</span></span><br><span class="line"><span class="string">  这类信息通常被用于 Java 虚拟机的验证和运行，以及 Java 程序的调试，一般无须深入了解。</span></span><br><span class="line"><span class="string">  '</span><span class="string">''</span></span><br><span class="line">  interfaces: 0, fields: 4, methods: 2, attributes: 1</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 常量池，用来存放各种常量以及符号引用。</span></span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">常量池中的每一项都有一个对应的索引（如 #1），并且可能引用其他的常量池项（#1 = Methodref #8.#23）。</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line">Constant pool:</span><br><span class="line">   <span class="comment">#1 = Methodref          #8.#23         // java/lang/Object."&lt;init&gt;":()V</span></span><br><span class="line">   <span class="comment">#2 = Fieldref           #7.#24         // Foo.tryBlock:I</span></span><br><span class="line">   <span class="comment">#3 = Fieldref           #7.#25         // Foo.finallyBlock:I</span></span><br><span class="line">   <span class="comment">#4 = Class              #26            // java/lang/Exception</span></span><br><span class="line">   <span class="comment">#5 = Fieldref           #7.#27         // Foo.catchBlock:I</span></span><br><span class="line">   <span class="comment">#6 = Fieldref           #7.#28         // Foo.methodExit:I</span></span><br><span class="line">   <span class="comment">#7 = Class              #29            // Foo</span></span><br><span class="line">   <span class="comment">#8 = Class              #30            // java/lang/Object</span></span><br><span class="line">   <span class="comment">#9 = Utf8               tryBlock</span></span><br><span class="line">  <span class="comment">#10 = Utf8               I</span></span><br><span class="line">  <span class="comment">#11 = Utf8               catchBlock</span></span><br><span class="line">  <span class="comment">#12 = Utf8               finallyBlock</span></span><br><span class="line">  <span class="comment">#13 = Utf8               methodExit</span></span><br><span class="line">  <span class="comment">#14 = Utf8               &lt;init&gt;</span></span><br><span class="line">  <span class="comment">#15 = Utf8               ()V</span></span><br><span class="line">  <span class="comment">#16 = Utf8               Code</span></span><br><span class="line">  <span class="comment">#17 = Utf8               LineNumberTable</span></span><br><span class="line">  <span class="comment">#18 = Utf8               test</span></span><br><span class="line">  <span class="comment">#19 = Utf8               StackMapTable</span></span><br><span class="line">  <span class="comment">#20 = Class              #31            // java/lang/Throwable</span></span><br><span class="line">  <span class="comment">#21 = Utf8               SourceFile</span></span><br><span class="line">  <span class="comment">#22 = Utf8               Foo.java</span></span><br><span class="line">  <span class="comment">#23 = NameAndType        #14:#15        // "&lt;init&gt;":()V</span></span><br><span class="line">  <span class="comment">#24 = NameAndType        #9:#10         // tryBlock:I</span></span><br><span class="line">  <span class="comment">#25 = NameAndType        #12:#10        // finallyBlock:I</span></span><br><span class="line">  <span class="comment">#26 = Utf8               java/lang/Exception</span></span><br><span class="line">  <span class="comment">#27 = NameAndType        #11:#10        // catchBlock:I</span></span><br><span class="line">  <span class="comment">#28 = NameAndType        #13:#10        // methodExit:I</span></span><br><span class="line">  <span class="comment">#29 = Utf8               Foo</span></span><br><span class="line">  <span class="comment">#30 = Utf8               java/lang/Object</span></span><br><span class="line">  <span class="comment">#31 = Utf8               java/lang/Throwable</span></span><br><span class="line">  </span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment"># 字段区域，用来列举该类中的各个字段。</span></span><br><span class="line">  <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">  这里最主要的信息便是该字段的类型（descriptor: I）以及访问权限（flags: (0x0002) ACC_PRIVATE）。</span></span><br><span class="line"><span class="string">  对于声明为 final 的静态字段而言，如果它是基本类型或者字符串类型，那么字段区域还将包括它的常量值。</span></span><br><span class="line"><span class="string">  '</span><span class="string">''</span></span><br><span class="line">  private int tryBlock;</span><br><span class="line">    descriptor: I</span><br><span class="line">    flags: (0x0002) ACC_PRIVATE</span><br><span class="line"> </span><br><span class="line">  private int catchBlock;</span><br><span class="line">    descriptor: I</span><br><span class="line">    flags: (0x0002) ACC_PRIVATE</span><br><span class="line"> </span><br><span class="line">  private int finallyBlock;</span><br><span class="line">    descriptor: I</span><br><span class="line">    flags: (0x0002) ACC_PRIVATE</span><br><span class="line"> </span><br><span class="line">  private int methodExit;</span><br><span class="line">    descriptor: I</span><br><span class="line">    flags: (0x0002) ACC_PRIVATE</span><br><span class="line"> </span><br><span class="line">  <span class="comment"># 方法区域，用来列举该类中的各个方法。</span></span><br><span class="line">  <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">  除了方法描述符以及访问权限之外，每个方法还包括最为重要的代码区域（Code:)。</span></span><br><span class="line"><span class="string">  '</span><span class="string">''</span></span><br><span class="line">  public Foo();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: (0x0001) ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=1, locals=1, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokespecial <span class="comment">#1                  // Method java/lang/Object."&lt;init&gt;":()V</span></span><br><span class="line">         4: <span class="built_in">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 1: 0</span><br><span class="line"> </span><br><span class="line">  public void <span class="built_in">test</span>();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: (0x0001) ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">      代码区域一开始会声明该方法中的操作数栈（stack=2）和局部变量数目（locals=3）的最大值，以及该方法接收参数的个数（args_size=1）。</span></span><br><span class="line"><span class="string">      注意这里局部变量指的是字节码中的局部变量，而非 Java 程序中的局部变量。</span></span><br><span class="line"><span class="string">      '</span><span class="string">''</span></span><br><span class="line">      stack=2, locals=3, args_size=1</span><br><span class="line">         <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">         接下来则是该方法的字节码。每条字节码均标注了对应的偏移量（bytecode index，BCI），这是用来定位字节码的。</span></span><br><span class="line"><span class="string">         比如说偏移量为 10 的跳转字节码 10: goto 35，将跳转至偏移量为 35 的字节码 35: aload_0。</span></span><br><span class="line"><span class="string">         '</span><span class="string">''</span></span><br><span class="line">         0: aload_0</span><br><span class="line">         1: iconst_0</span><br><span class="line">         2: putfield      <span class="comment">#2                  // Field tryBlock:I</span></span><br><span class="line">         5: aload_0</span><br><span class="line">         6: iconst_2</span><br><span class="line">         7: putfield      <span class="comment">#3                  // Field finallyBlock:I</span></span><br><span class="line">        10: goto          35</span><br><span class="line">        13: astore_1</span><br><span class="line">        14: aload_0</span><br><span class="line">        15: iconst_1</span><br><span class="line">        16: putfield      <span class="comment">#5                  // Field catchBlock:I</span></span><br><span class="line">        19: aload_0</span><br><span class="line">        20: iconst_2</span><br><span class="line">        21: putfield      <span class="comment">#3                  // Field finallyBlock:I</span></span><br><span class="line">        24: goto          35</span><br><span class="line">        27: astore_2</span><br><span class="line">        28: aload_0</span><br><span class="line">        29: iconst_2</span><br><span class="line">        30: putfield      <span class="comment">#3                  // Field finallyBlock:I</span></span><br><span class="line">        33: aload_2</span><br><span class="line">        34: athrow</span><br><span class="line">        35: aload_0</span><br><span class="line">        36: iconst_3</span><br><span class="line">        37: putfield      <span class="comment">#6                  // Field methodExit:I</span></span><br><span class="line">        40: <span class="built_in">return</span></span><br><span class="line">      </span><br><span class="line">      <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">      紧跟着的异常表（Exception table:）也会使用偏移量来定位每个异常处理器所监控的范围（由 from 到 to 的代码区域），以及异常处理器的起始位置（target）。</span></span><br><span class="line"><span class="string">      除此之外，它还会声明所捕获的异常类型（type）。其中，any 指代任意异常类型。</span></span><br><span class="line"><span class="string">      '</span><span class="string">''</span></span><br><span class="line">      Exception table:</span><br><span class="line">         from    to  target <span class="built_in">type</span></span><br><span class="line">             0     5    13   Class java/lang/Exception</span><br><span class="line">             0     5    27   any</span><br><span class="line">            13    19    27   any</span><br><span class="line">      </span><br><span class="line">      <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">      再接下来的行数表（LineNumberTable:）则是 Java 源程序到字节码偏移量的映射。</span></span><br><span class="line"><span class="string">      '</span><span class="string">''</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 9: 0</span><br><span class="line">        line 13: 5</span><br><span class="line">        line 14: 10</span><br><span class="line">        line 10: 13</span><br><span class="line">        line 11: 14</span><br><span class="line">        line 13: 19</span><br><span class="line">        line 14: 24</span><br><span class="line">        line 13: 27</span><br><span class="line">        line 14: 33</span><br><span class="line">        line 15: 35</span><br><span class="line">        line 16: 40</span><br><span class="line">      StackMapTable: number_of_entries = 3</span><br><span class="line">        frame_type = 77 /* same_locals_1_stack_item */</span><br><span class="line">          stack = [ class java/lang/Exception ]</span><br><span class="line">        frame_type = 77 /* same_locals_1_stack_item */</span><br><span class="line">          stack = [ class java/lang/Throwable ]</span><br><span class="line">        frame_type = 7 /* same */</span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">"Foo.java"</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【工具篇】ASM：Java字节码框架</title>
      <link href="/2019/02/05/%E3%80%90%E5%B7%A5%E5%85%B7%E7%AF%87%E3%80%91ASM%EF%BC%9AJava%E5%AD%97%E8%8A%82%E7%A0%81%E6%A1%86%E6%9E%B6/"/>
      <url>/2019/02/05/%E3%80%90%E5%B7%A5%E5%85%B7%E7%AF%87%E3%80%91ASM%EF%BC%9AJava%E5%AD%97%E8%8A%82%E7%A0%81%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://asm.ow2.io/" target="_blank" rel="noopener">ASM</a>(<a href="https://repository.ow2.org/nexus/content/repositories/releases/org/ow2/asm/asm-all/6.0_BETA/asm-all-6.0_BETA.jar" target="_blank" rel="noopener">Download</a>)是一个字节码分析及修改框架。它被广泛应用于许多项目之中，例如 Groovy、Kotlin 的编译器，代码覆盖测试工具 Cobertura、JaCoCo，以及各式各样通过字节码注入实现的程序行为监控工具。甚至是 Java 8 中 Lambda 表达式的适配器类，也是借助 ASM 来动态生成的。</p><p>ASM 既可以生成新的 class 文件，也可以修改已有的 class 文件。前者相对比较简单一些。ASM 甚至还提供了一个辅助类 ASMifier，它将接收一个 class 文件并且输出一段生成该 class 文件原始字节数组的代码。如果你想快速上手 ASM 的话，那么你可以借助 ASMifier 生成的代码来探索各个 API 的用法。</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重新编译JVM</title>
      <link href="/2019/01/03/%E9%87%8D%E6%96%B0%E7%BC%96%E8%AF%91JVM/"/>
      <url>/2019/01/03/%E9%87%8D%E6%96%B0%E7%BC%96%E8%AF%91JVM/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>Mac 系统为例</p></blockquote><h2 id="openjdk-7u"><a href="#openjdk-7u" class="headerlink" title="openjdk_7u"></a>openjdk_7u</h2><h3 id="1-获取JDK源代码"><a href="#1-获取JDK源代码" class="headerlink" title="1 获取JDK源代码"></a>1 获取JDK源代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://download.java.net/openjdk/jdk7/</span><br></pre></td></tr></table></figure><h3 id="2-进行编译"><a href="#2-进行编译" class="headerlink" title="2 进行编译"></a>2 进行编译</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设定语言，否则会出现HashTable内的空指针异常</span></span><br><span class="line"><span class="built_in">export</span> LANG=C</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bootstrap JDK的安装路径.必须设置</span></span><br><span class="line"><span class="built_in">export</span> ALT_BOOTDIR=/Library/Java/JavaVirtualMachines/jdk1.8.0_152.jdk/Contents/Home</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要重设置JAVA_HOME 和 CLASSPATH</span></span><br><span class="line"><span class="built_in">unset</span> JAVA_HOME</span><br><span class="line"><span class="built_in">unset</span> CLASSPATH</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许自动下载依赖</span></span><br><span class="line"><span class="built_in">export</span> ALLOW_DOWNLOADS=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 并行编译的线程数,设置为和CPU内核一致</span></span><br><span class="line"><span class="built_in">export</span> HOTSPOT_BUILD_JOBS=8</span><br><span class="line"><span class="built_in">export</span> ALT_PARALLEL_COMPILE_JOBS=8</span><br><span class="line"></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="built_in">export</span> SKIP_COMPARE_IMAGES=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用预编译文件</span></span><br><span class="line"><span class="built_in">export</span> USE_PRECOMPILED_HEADER=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要编译的内容</span></span><br><span class="line"><span class="built_in">export</span> BUILD_LANGTOOLS=<span class="literal">true</span></span><br><span class="line"><span class="built_in">export</span> BUILD_JAXP=<span class="literal">false</span></span><br><span class="line"><span class="built_in">export</span> BUILD_JAXWS=<span class="literal">false</span></span><br><span class="line"><span class="built_in">export</span> BUILD_CORBA=<span class="literal">false</span></span><br><span class="line"><span class="built_in">export</span> BUILD_HOSTPOT=<span class="literal">true</span></span><br><span class="line"><span class="built_in">export</span> BUILD_JDK=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#要编译的版本</span></span><br><span class="line"><span class="comment"># export SKIP_DEBUG_BUILD=false</span></span><br><span class="line"><span class="comment"># export SKIP_FASTDEBUG_BUILD=true</span></span><br><span class="line"><span class="comment"># export DEBUG_NAME=debug</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把它设置为false可以避免javaws和浏览器Java插件之类的部分build</span></span><br><span class="line">BUILD_DEPLOY=<span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把它设置为false就不会build出安装包.因为安装包里有些奇怪的依赖,</span></span><br><span class="line"><span class="comment"># 但是即便不build出它也已经能得到完整的JDK映像,所以还是别build它好了</span></span><br><span class="line">BUILD_INSTALL=<span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#编译结果所存放的路径</span></span><br><span class="line"><span class="built_in">export</span> ALT_OUTPUTDIR=/Users/vallzey/Tools/JVM/jdkBuild/openjdk_7/build</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这两个环境变量必须去掉</span></span><br><span class="line"><span class="built_in">unset</span> CLASSPATH</span><br><span class="line"><span class="built_in">unset</span> JAVA_HOME</span><br><span class="line"></span><br><span class="line">:<span class="string">'</span></span><br><span class="line"><span class="string">2&gt;&amp;1应该分成两个部分来看，一个是2&gt;以及另一个是&amp;1，</span></span><br><span class="line"><span class="string">其中2&gt;就是将标准出错重定向到某个特定的地方；&amp;1是指无论标准输出在哪里。</span></span><br><span class="line"><span class="string">所以2&gt;&amp;1的意思就是说无论标准出错在哪里，都将标准出错重定向到标准输出中</span></span><br><span class="line"><span class="string">'</span></span><br><span class="line">make 2&gt;&amp;1 | tee <span class="variable">$ALT_OUTPUTDIR</span>/build.log</span><br></pre></td></tr></table></figure><h2 id="openjdk-9"><a href="#openjdk-9" class="headerlink" title="openjdk_9"></a>openjdk_9</h2><h3 id="1-准备"><a href="#1-准备" class="headerlink" title="1 准备"></a>1 准备</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 安装ccache</span><br><span class="line">brew install ccache</span><br><span class="line"># freetype</span><br><span class="line">brew install freetype</span><br></pre></td></tr></table></figure><h3 id="2-下载"><a href="#2-下载" class="headerlink" title="2 下载"></a>2 <a href="http://jdk.java.net/java-se-ri/9" target="_blank" rel="noopener">下载</a></h3><h3 id="3-configure"><a href="#3-configure" class="headerlink" title="3 configure"></a>3 configure</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在源码顶层目录上执行</span><br><span class="line">sh configure --with-debug-level=slowdebug --<span class="built_in">disable</span>-warnings-as-errors --with-freetype-include=/usr/<span class="built_in">local</span>/Cellar/freetype/2.9.1/include/freetype2 --with-freetype-lib=/usr/<span class="built_in">local</span>/Cellar/freetype/2.9.1/lib</span><br></pre></td></tr></table></figure><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><ul><li><p>打开hotspot目录中的src/share/vm/memory/virtualspace.cpp 搜索其中if (base() &gt; 0) {改为if (base() != NULL) {</p></li><li><p>src/share/vm/opto/lcm.cpp 搜索其中if (Universe::narrow_oop_base() &gt; 0) { 改为 if (Universe::narrow_oop_base() != NULL) {</p></li><li><p>src/share/vm/opto/loopPredicate.cpp 搜索其中assert(rng-&gt;Opcode() == Op_LoadRange || _igvn.type(rng)-&gt;is_int() &gt;= 0, “must be”); 改为 assert(rng-&gt;Opcode() == Op_LoadRange || iff-&gt;is_RangeCheck() || _igvn.type(rng)-&gt;is_int()-&gt;_lo &gt;= 0, “must be”);</p></li></ul><h3 id="运行make"><a href="#运行make" class="headerlink" title="运行make"></a>运行make</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Run make</span><br><span class="line">export LANG=C</span><br><span class="line">make all LOG=debug 2&gt;&amp;1 | tee make_mac_x64.log</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tensorflow的简单使用</title>
      <link href="/2018/10/21/tensorflow%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/10/21/tensorflow%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="TensorFlow基础使用"><a href="#TensorFlow基础使用" class="headerlink" title="TensorFlow基础使用"></a>TensorFlow基础使用</h3><hr><h5 id="启发"><a href="#启发" class="headerlink" title="启发"></a>启发</h5><p>先提一个启发性的问题，假设你有一个损失函数<code>$J_w$</code>需要最小化:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">J_w=w^2-10w+25</span><br></pre></td></tr></table></figure><p>你只有这个函数，我们来看一下怎样用TensorFlow将其最小化，因为一个非常类似的程序结构可以用来训练神经网络。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 接下来，让我们定义参数w，在TensorFlow中，你要用tf.Variable()来定义参数</span></span><br><span class="line">w = tf.Variable(<span class="number">0</span>, dtype=tf.float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后我们定义损失函数 Jw = w^2-10*w+25：</span></span><br><span class="line"><span class="comment"># cost = tf.add(tf.add(w**2, tf.multiply(-10., w), 25))</span></span><br><span class="line">cost = w**<span class="number">2</span><span class="number">-10</span>*w+<span class="number">25</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># (让我们用0.01的学习率，目标是最小化损失)。</span></span><br><span class="line">train = tf.train.GradientDescentOptimizer(<span class="number">0.01</span>).minimize(cost)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后下面的几行是惯用表达式:</span></span><br><span class="line"></span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">session = tf.Session()  <span class="comment"># 这样就开启了一个TensorFlow session。</span></span><br><span class="line">session.run(init)   <span class="comment"># 来初始化全局变量。</span></span><br><span class="line">session.run(w)  <span class="comment"># 然后让TensorFlow评估一个变量，我们要用到:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面的这一行将w初始化为0，并定义损失函数，我们定义train为学习算法，它用梯度下降法优化器使损失函数最小化，</span></span><br><span class="line"><span class="comment"># 但实际上我们还没有运行学习算法，所以#上面的这一行将w初始化为0，并定义损失函数，我们定义train为学习算法，</span></span><br><span class="line"><span class="comment"># 它用梯度下降法优化器使损失函数最小化，但实际上我们还没有运行学习算法，所以session.run(w)评估了w，让我：：</span></span><br><span class="line">print(session.run(w))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    session.run(train)</span><br><span class="line">    print(session.run(w))</span><br></pre></td></tr></table></figure><h5 id="对于-x-可变的处理"><a href="#对于-x-可变的处理" class="headerlink" title="对于$x$可变的处理"></a>对于<code>$x$</code>可变的处理</h5><p>TensorFlow还有一个特点，我想告诉你，那就是这个例子将<code>$w$</code>的一个固定函数最小化了。如果你想要最小化的函数是训练集函数又如何呢？不管你有什么训练数据<code>$x$</code>，当你训练神经网络时，训练数据<code>$x$</code>会改变，那么如何把训练数据加入TensorFlow程序呢？</p><p>训练数据有<code>$x$</code>和<code>$y$</code>，但这个例子中只有<code>$x$</code>，把定义为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此函数可以理解为形参，用于定义过程，在执行的时候再赋具体的值</span></span><br><span class="line">x = tf.placeholder(tf.float32,[<span class="number">3</span>,<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>使用如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">coefficient = np.array([[<span class="number">1.</span>], [<span class="number">-20.</span>], [<span class="number">100.</span>]])</span><br><span class="line">x = tf.placeholder(dtype=tf.float32, shape=(<span class="number">3</span>, <span class="number">1</span>))</span><br><span class="line"><span class="comment"># 接下来，让我们定义参数w，在TensorFlow中，你要用tf.Variable()来定义参数</span></span><br><span class="line">w = tf.Variable(<span class="number">0</span>, dtype=tf.float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后我们定义损失函数 Jw = w^2-10*w+25：</span></span><br><span class="line"><span class="comment"># cost = tf.add(tf.add(w**2, tf.multiply(-10., w), 25))</span></span><br><span class="line">cost = x[<span class="number">0</span>][<span class="number">0</span>] * w ** <span class="number">2</span> + x[<span class="number">1</span>][<span class="number">0</span>] * w + x[<span class="number">2</span>][<span class="number">0</span>] * <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># (让我们用0.01的学习率，目标是最小化损失)。</span></span><br><span class="line">train = tf.train.GradientDescentOptimizer(<span class="number">0.01</span>).minimize(cost)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后下面的几行是惯用表达式:</span></span><br><span class="line"></span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> session:</span><br><span class="line">    <span class="comment"># session = tf.Session()  # 这样就开启了一个TensorFlow session。</span></span><br><span class="line">    session.run(init)  <span class="comment"># 来初始化全局变量。</span></span><br><span class="line">    session.run(w)  <span class="comment"># 然后让TensorFlow评估一个变量，我们要用到:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 上面的这一行将w初始化为0，并定义损失函数，我们定义train为学习算法，它用梯度下降法优化器使损失函数最小化，</span></span><br><span class="line">    <span class="comment"># 但实际上我们还没有运行学习算法，所以#上面的这一行将w初始化为0，并定义损失函数，我们定义train为学习算法，</span></span><br><span class="line">    <span class="comment"># 它用梯度下降法优化器使损失函数最小化，但实际上我们还没有运行学习算法，所以session.run(w)评估了w，让我：：</span></span><br><span class="line">    print(session.run(w))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">        session.run(train,feed_dict=&#123;x: coefficient&#125;)</span><br><span class="line">    print(session.run(w))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>getopt的使用</title>
      <link href="/2018/10/20/getopt%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/10/20/getopt%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="python中-getopt-模块"><a href="#python中-getopt-模块" class="headerlink" title="python中 getopt 模块"></a>python中 getopt 模块</h3><ul><li>该模块是专门用来处理命令行参数的</li></ul><h5 id="函数getopt-args-shortopts-longopts"><a href="#函数getopt-args-shortopts-longopts" class="headerlink" title="函数getopt(args, shortopts, longopts = [])"></a>函数getopt(args, shortopts, longopts = [])</h5><p>参数args一般是sys.argv[1:]</p><ol><li>shortopts  短格式 (-) </li><li>longopts 长格式(–) </li></ol><p>命令行中输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python test.py -i 127.0.0.1 -p 80 55 66</span><br><span class="line"></span><br><span class="line">python test.py --ip=127.0.0.1 --port=80 55 66</span><br></pre></td></tr></table></figure><p>下面的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">options,args = getopt.getopt(sys.argv[<span class="number">1</span>:],<span class="string">"hp:i:"</span>,[<span class="string">"help"</span>,<span class="string">"ip="</span>,<span class="string">"port="</span>])</span><br><span class="line"><span class="keyword">except</span> getopt.GetoptError:</span><br><span class="line">sys.exit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name,value <span class="keyword">in</span> options:</span><br><span class="line"><span class="keyword">if</span> name <span class="keyword">in</span> (<span class="string">"-h"</span>,<span class="string">"--help"</span>):</span><br><span class="line">usage()</span><br><span class="line"><span class="keyword">if</span> name <span class="keyword">in</span> (<span class="string">"-i"</span>,<span class="string">"--ip"</span>):</span><br><span class="line"><span class="keyword">print</span> <span class="string">'ip is----'</span>,value</span><br><span class="line"><span class="keyword">if</span> name <span class="keyword">in</span> (<span class="string">"-p"</span>,<span class="string">"--port"</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'port is----'</span>,value</span><br><span class="line"></span><br><span class="line">options,args = getopt.getopt(sys.argv[<span class="number">1</span>:],<span class="string">"hp:i:"</span>,[<span class="string">"help"</span>,<span class="string">"ip="</span>,<span class="string">"port="</span>])</span><br></pre></td></tr></table></figure><h6 id="“hp-i-”"><a href="#“hp-i-”" class="headerlink" title="“hp:i:”"></a>“hp:i:”</h6><ul><li>短格式 — h 后面没有冒号：表示后面不带参数，p：和 i：后面有冒号表示后面需要参数</li></ul><h6 id="“help”-”ip-”-”port-”"><a href="#“help”-”ip-”-”port-”" class="headerlink" title="[“help”,”ip=”,”port=”]"></a>[“help”,”ip=”,”port=”]</h6><ul><li><p>长格式 — help后面没有等号=，表示后面不带参数，其他三个有=，表示后面需要参数</p></li><li><p>返回值 options 是个包含元祖的列表，每个元祖是分析出来的格式信息，比如 [(‘-i’,’127.0.0.1’),(‘-p’,’80’)] ;</p></li><li><p>args 是个列表，包含那些没有‘-’或‘–’的参数，比如：[‘55’,’66’]</p></li></ul><blockquote><p>注意：定义命令行参数时，要先定义带’-‘选项的参数，再定义没有‘-’的参数</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pymongo的简单使用案例</title>
      <link href="/2018/10/20/pymongo%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/"/>
      <url>/2018/10/20/pymongo%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="用于mongodb和pandas的通用连接"><a href="#用于mongodb和pandas的通用连接" class="headerlink" title="用于mongodb和pandas的通用连接"></a>用于mongodb和pandas的通用连接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_connect_mongo</span><span class="params">(host, port, username, password, db)</span>:</span></span><br><span class="line">    <span class="string">""" A util for making a connection to mongo """</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> username <span class="keyword">and</span> password:</span><br><span class="line">        mongo_uri = <span class="string">'mongodb://%s:%s@%s:%s/%s'</span> % (username, password, host, port, db)</span><br><span class="line">        conn = MongoClient(mongo_uri)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        conn = MongoClient(host, port)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> conn[db]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_mongo</span><span class="params">(db, collection, query=&#123;&#125;, host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>, username=None, password=None, no_id=True)</span>:</span></span><br><span class="line">    <span class="string">""" Read from Mongo and Store into DataFrame """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Connect to MongoDB</span></span><br><span class="line">    db = _connect_mongo(host=host, port=port, username=username, password=password, db=db)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Make a query to the specific DB and Collection</span></span><br><span class="line">    cursor = db[collection].find(query)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Expand the cursor and construct the DataFrame</span></span><br><span class="line">    df =  pd.DataFrame(list(cursor))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Delete the _id</span></span><br><span class="line">    <span class="keyword">if</span> no_id:</span><br><span class="line">        <span class="keyword">del</span> df[<span class="string">'_id'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> df</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">'__main__'</span>:</span><br><span class="line">    df = read_mongo(<span class="string">'zhihu'</span>,<span class="string">'questions'</span>,&#123;&#125;)</span><br><span class="line">    <span class="keyword">print</span> df</span><br></pre></td></tr></table></figure><blockquote><p>注意:上面的db是用户认证的数据库,而不是用户使用的数据库</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ConfigParser的使用</title>
      <link href="/2018/10/20/ConfigParser%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/10/20/ConfigParser%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h5 id="配置文件格式"><a href="#配置文件格式" class="headerlink" title="配置文件格式"></a>配置文件格式</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 注释</span><br><span class="line"></span><br><span class="line">[Section1]</span><br><span class="line">an_int = 15</span><br><span class="line">a_bool = true</span><br><span class="line">a_float = 3.1415</span><br><span class="line">baz = fun</span><br><span class="line">bar = Python</span><br><span class="line">foo = %(bar)s is %(baz)s!</span><br><span class="line"></span><br><span class="line">#:和=都可以用与赋值</span><br><span class="line">[My Section]</span><br><span class="line">foodir: %(dir)s/whatever</span><br><span class="line">dir=frob</span><br><span class="line"># : 的fishier可以换行</span><br><span class="line">long: this value continues</span><br><span class="line">   in the next line</span><br></pre></td></tr></table></figure><h5 id="读取文件方法"><a href="#读取文件方法" class="headerlink" title="读取文件方法"></a>读取文件方法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ConfigParser</span><br><span class="line"></span><br><span class="line">config = ConfigParser.RawConfigParser()</span><br><span class="line">config.read(<span class="string">'test.cfg'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># getfloat() raises an exception if the value is not a float</span></span><br><span class="line"><span class="comment"># getint() and getboolean() also do this for their respective types</span></span><br><span class="line">a_float = config.getfloat(<span class="string">'Section1'</span>, <span class="string">'a_float'</span>)</span><br><span class="line">an_int = config.getint(<span class="string">'Section1'</span>, <span class="string">'an_int'</span>)</span><br><span class="line"><span class="keyword">print</span> a_float + an_int</span><br></pre></td></tr></table></figure><h5 id="读取并且赋值"><a href="#读取并且赋值" class="headerlink" title="读取并且赋值"></a>读取并且赋值</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ConfigParser</span><br><span class="line">config = ConfigParser.ConfigParser()</span><br><span class="line">config.read(<span class="string">'test.cfg'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the third, optional argument of get to 1 if you wish to use raw mode.</span></span><br><span class="line"><span class="keyword">print</span> config.get(<span class="string">'Section1'</span>, <span class="string">'foo'</span>, <span class="number">0</span>)  <span class="comment"># -&gt; "Python is fun!"</span></span><br><span class="line"><span class="keyword">print</span> config.get(<span class="string">'Section1'</span>, <span class="string">'foo'</span>, <span class="number">1</span>)  <span class="comment"># -&gt; "%(bar)s is %(baz)s!"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The optional fourth argument is a dict with members that will take</span></span><br><span class="line"><span class="comment"># precedence in interpolation.</span></span><br><span class="line"><span class="keyword">print</span> config.get(<span class="string">'Section1'</span>, <span class="string">'foo'</span>, <span class="number">0</span>, &#123;<span class="string">'bar'</span>: <span class="string">'Documentation'</span>,</span><br><span class="line">                                        <span class="string">'baz'</span>: <span class="string">'evil'</span>&#125;)</span><br></pre></td></tr></table></figure><h5 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ConfigParser</span><br><span class="line"></span><br><span class="line">config = ConfigParser.RawConfigParser()</span><br><span class="line"></span><br><span class="line"><span class="comment"># When adding sections or items, add them in the reverse order of</span></span><br><span class="line"><span class="comment"># how you want them to be displayed in the actual file.</span></span><br><span class="line"><span class="comment"># In addition, please note that using RawConfigParser's and the raw</span></span><br><span class="line"><span class="comment"># mode of ConfigParser's respective set functions, you can assign</span></span><br><span class="line"><span class="comment"># non-string values to keys internally, but will receive an error</span></span><br><span class="line"><span class="comment"># when attempting to write to a file or when you get it in non-raw</span></span><br><span class="line"><span class="comment"># mode. SafeConfigParser does not allow such assignments to take place.</span></span><br><span class="line">config.add_section(<span class="string">'Section1'</span>)</span><br><span class="line">config.set(<span class="string">'Section1'</span>, <span class="string">'an_int'</span>, <span class="string">'15'</span>)</span><br><span class="line">config.set(<span class="string">'Section1'</span>, <span class="string">'a_bool'</span>, <span class="string">'true'</span>)</span><br><span class="line">config.set(<span class="string">'Section1'</span>, <span class="string">'a_float'</span>, <span class="string">'3.1415'</span>)</span><br><span class="line">config.set(<span class="string">'Section1'</span>, <span class="string">'baz'</span>, <span class="string">'fun'</span>)</span><br><span class="line">config.set(<span class="string">'Section1'</span>, <span class="string">'bar'</span>, <span class="string">'Python'</span>)</span><br><span class="line">config.set(<span class="string">'Section1'</span>, <span class="string">'foo'</span>, <span class="string">'%(bar)s is %(baz)s!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing our configuration file to 'example.cfg'</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'example.cfg'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> configfile:</span><br><span class="line">    config.write(configfile)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于pandas的使用</title>
      <link href="/2018/10/20/%E5%85%B3%E4%BA%8Epandas%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/10/20/%E5%85%B3%E4%BA%8Epandas%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h5 id="初始化数据"><a href="#初始化数据" class="headerlink" title="初始化数据"></a>初始化数据</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(list(project_info.find()))</span><br></pre></td></tr></table></figure><h5 id="删除字段"><a href="#删除字段" class="headerlink" title="删除字段"></a>删除字段</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> df[<span class="string">'_id'</span>]</span><br></pre></td></tr></table></figure><h5 id="选择需要显示的字段"><a href="#选择需要显示的字段" class="headerlink" title="选择需要显示的字段"></a>选择需要显示的字段</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = data[[<span class="string">'aear'</span>,<span class="string">'cate'</span>,<span class="string">'subcate'</span>,<span class="string">'name'</span>,<span class="string">'maxmoney'</span>,<span class="string">'minmoney'</span>,<span class="string">'time'</span>]]</span><br></pre></td></tr></table></figure><h5 id="显示前n条记录"><a href="#显示前n条记录" class="headerlink" title="显示前n条记录"></a>显示前n条记录</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.head(n)</span><br></pre></td></tr></table></figure><h5 id="使用groupby实现数据分组"><a href="#使用groupby实现数据分组" class="headerlink" title="使用groupby实现数据分组"></a>使用groupby实现数据分组</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这个时候并不是DataFrame类型,可以根据某个字段分组</span></span><br><span class="line">group = df.groupby(<span class="string">'name'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以使用size()记录分组数量,并且用sort_values(ascending=False)降序</span></span><br><span class="line">sort_group = group.size().sort_values(ascending=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># sorted_series.keys()表示取出所有的keys,sorted_series存储的为values</span></span><br><span class="line"><span class="comment"># 可以使用iteritems()遍历</span></span><br><span class="line"><span class="keyword">for</span> userid, length <span class="keyword">in</span> sort_group.iteritems():</span><br><span class="line">    print(<span class="string">'%d:%d'</span> % (userid, length))</span><br></pre></td></tr></table></figure><h5 id="pandas-Series-diff"><a href="#pandas-Series-diff" class="headerlink" title="pandas.Series.diff"></a>pandas.Series.diff</h5><blockquote><p>计算Series元素与Series中另一个元素的差异（默认值为上一行中的元素）。</p></blockquote><h6 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax:"></a>Syntax:</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Series.diff(periods=1)</span><br><span class="line"></span><br><span class="line">Parameters:</span><br><span class="line">periods : int, default 1.Periods to shift for calculating difference, accepts negative values.</span><br></pre></td></tr></table></figure><h6 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>])</span><br><span class="line">s.diff()</span><br></pre></td></tr></table></figure><h6 id="Output"><a href="#Output" class="headerlink" title="Output:"></a>Output:</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>    NaN</span><br><span class="line"><span class="number">1</span>    <span class="number">0.0</span></span><br><span class="line"><span class="number">2</span>    <span class="number">1.0</span></span><br><span class="line"><span class="number">3</span>    <span class="number">1.0</span></span><br><span class="line"><span class="number">4</span>    <span class="number">2.0</span></span><br><span class="line"><span class="number">5</span>    <span class="number">3.0</span></span><br></pre></td></tr></table></figure><h5 id="pandas-DataFrame-apply"><a href="#pandas-DataFrame-apply" class="headerlink" title="pandas.DataFrame.apply"></a>pandas.DataFrame.apply</h5><blockquote><p>沿DataFrame的轴应用函数。。</p></blockquote><h6 id="Syntax-1"><a href="#Syntax-1" class="headerlink" title="Syntax:"></a>Syntax:</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DataFrame.apply(func, axis=0, broadcast=None, raw=False, reduce=None, result_type=None, args=(), **kwds)</span><br><span class="line"></span><br><span class="line">Parameters:</span><br><span class="line">func : function.Function to apply to each column or row.</span><br><span class="line">axis : &#123;0 or ‘index’, 1 or ‘columns’&#125;, default 0</span><br><span class="line">        Axis along which the function is applied:</span><br><span class="line">        0 or ‘index’: apply function to each column.</span><br><span class="line">        1 or ‘columns’: apply function to each row.</span><br></pre></td></tr></table></figure><h6 id="Code-1"><a href="#Code-1" class="headerlink" title="Code:"></a>Code:</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>df = pd.DataFrame([[<span class="number">4</span>, <span class="number">9</span>],] * <span class="number">3</span>, columns=[<span class="string">'A'</span>, <span class="string">'B'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df</span><br><span class="line">   A  B</span><br><span class="line"><span class="number">0</span>  <span class="number">4</span>  <span class="number">9</span></span><br><span class="line"><span class="number">1</span>  <span class="number">4</span>  <span class="number">9</span></span><br><span class="line"><span class="number">2</span>  <span class="number">4</span>  <span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.apply(np.sum, axis=<span class="number">0</span>)</span><br><span class="line">A    <span class="number">12</span></span><br><span class="line">B    <span class="number">27</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.apply(np.sum, axis=<span class="number">1</span>)</span><br><span class="line"><span class="number">0</span>    <span class="number">13</span></span><br><span class="line"><span class="number">1</span>    <span class="number">13</span></span><br><span class="line"><span class="number">2</span>    <span class="number">13</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><blockquote><p>筛选</p></blockquote><h6 id="Code-2"><a href="#Code-2" class="headerlink" title="Code:"></a>Code:</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 用于筛选某一列在list中存在数据</span></span><br><span class="line">df = pd.read_csv(file_path)</span><br><span class="line">l = [<span class="string">'a'</span>,<span class="string">'b'</span>]</span><br><span class="line">df = df[df[<span class="string">'name'</span>].isin(l)]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>selenium的使用</title>
      <link href="/2018/10/12/selenium%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/10/12/selenium%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="selenium的一些使用"><a href="#selenium的一些使用" class="headerlink" title="selenium的一些使用"></a>selenium的一些使用</h3><h5 id="Simple-test"><a href="#Simple-test" class="headerlink" title="Simple test"></a>Simple test</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(<span class="string">'/path/to/chromedriver'</span>)  <span class="comment"># Optional argument, if not specified will search path.</span></span><br><span class="line">driver.get(<span class="string">'http://www.google.com/xhtml'</span>);</span><br><span class="line">time.sleep(<span class="number">5</span>) <span class="comment"># Let the user actually see something!</span></span><br><span class="line">search_box = driver.find_element_by_name(<span class="string">'q'</span>)</span><br><span class="line">search_box.send_keys(<span class="string">'ChromeDriver'</span>)</span><br><span class="line">search_box.submit()</span><br><span class="line">time.sleep(<span class="number">5</span>) <span class="comment"># Let the user actually see something!</span></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h5 id="简单交互"><a href="#简单交互" class="headerlink" title="简单交互"></a>简单交互</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载网页</span></span><br><span class="line">driver.get(<span class="string">"http://www.google.com"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取网页元素</span></span><br><span class="line">element = driver.find_element_by_id(<span class="string">"passwd-id"</span>)</span><br><span class="line">element = driver.find_element_by_name(<span class="string">"passwd"</span>)</span><br><span class="line">element = driver.find_element_by_xpath(<span class="string">"//input[@id='passwd-id']"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入文本框</span></span><br><span class="line">element.send_keys(<span class="string">"some text"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入按键</span></span><br><span class="line">element.send_keys(<span class="string">" and some"</span>, Keys.ARROW_DOWN)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空文本</span></span><br><span class="line">element.clear()</span><br></pre></td></tr></table></figure><h5 id="填写表格"><a href="#填写表格" class="headerlink" title="填写表格"></a>填写表格</h5><p>你可以“切换”下拉菜单的状态，并且你可以使用“setSelected”来设置类似于所选OPTION标记的内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">element = driver.find_element_by_xpath(<span class="string">"//select[@name='name']"</span>)</span><br><span class="line">all_options = element.find_elements_by_tag_name(<span class="string">"option"</span>)</span><br><span class="line"><span class="keyword">for</span> option <span class="keyword">in</span> all_options:</span><br><span class="line">    print(<span class="string">"Value is: %s"</span> % option.get_attribute(<span class="string">"value"</span>))</span><br><span class="line">    option.click()</span><br></pre></td></tr></table></figure><p>正如你所看到的，这不是处理SELECT元素的最有效方式。 WebDriver的支持类包括一个名为“Select”的类，它提供了与这些类交互的有用方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> Select</span><br><span class="line">select = Select(driver.find_element_by_name(<span class="string">'name'</span>))</span><br><span class="line">select.select_by_index(index)</span><br><span class="line">select.select_by_visible_text(<span class="string">"text"</span>)</span><br><span class="line">select.select_by_value(value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># WebDriver还提供取消选择所有选定选项的功能：</span></span><br><span class="line">select = Select(driver.find_element_by_id(<span class="string">'id'</span>))</span><br><span class="line">select.deselect_all()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 假设在测试中，我们需要所有默认选定选项的列表，Select类提供了一个返回列表的属性方法：</span></span><br><span class="line">select = Select(driver.find_element_by_xpath(<span class="string">"//select[@name='name']"</span>))</span><br><span class="line">all_selected_options = select.all_selected_options</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取所有可用选项：</span></span><br><span class="line">options = select.options</span><br><span class="line"></span><br><span class="line"><span class="comment"># 完成表格填写后，您可能需要提交。一种方法是找到“提交”按钮并点击它：</span></span><br><span class="line"><span class="comment"># Assume the button has the ID "submit" :)</span></span><br><span class="line">driver.find_element_by_id(<span class="string">"submit"</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交表单</span></span><br><span class="line">element.submit()</span><br></pre></td></tr></table></figure><h5 id="高级部分"><a href="#高级部分" class="headerlink" title="高级部分"></a>高级部分</h5><p>对于页面的操作来说，最最重要的就是获取元素，以下列出使用时遇到的一些关于获取元素的问题：</p><ul><li><p>问题1：模拟登录的时候，获取不到表单中的元素</p></li><li><p>解答：由于很多网页比如淘宝，qq邮箱，网易邮箱，百度账号，网易考拉等等，登录框是由iframe嵌入的，所以没有直接获取是找不到的，需要切换到iframe中。</p></li><li><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iframe = login_box.find_element_by_css_selector(<span class="string">'iframe'</span>)</span><br><span class="line">driver.switch_to.frame(iframe)</span><br></pre></td></tr></table></figure></li><li><p>问题2：对于复杂深层的元素，怎样快速准确的获取</p></li><li><p>解答：这个问题其实没有统一的答案，但是我推荐使用google自带的css_selector，可以有效的选择元素，比如我在网易考拉上遇到的问题：</p></li><li><p>代码：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># #j_skuwrap &gt; div.skuBox.clearfix.first-skubox.last-skuBox &gt; div &gt; ul &gt; li:nth-child(1) &gt; a</span></span><br><span class="line">driver.find_elements_by_css_selector(<span class="string">'#j_skuwrap &gt; div.skuBox.clearfix.first-skubox.last-skuBox &gt; div &gt; ul &gt; li:nth-child(1) &gt; a'</span>)[<span class="number">0</span>].click()</span><br></pre></td></tr></table></figure><ul><li>问题3：打开一个新的界面，如何跳转</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">windows = driver.window_handles</span><br><span class="line">driver.switch_to.window(windows[<span class="number">-1</span>])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DataX实践</title>
      <link href="/2018/09/20/DataX%E5%AE%9E%E8%B7%B5/"/>
      <url>/2018/09/20/DataX%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="DataX的选型"><a href="#DataX的选型" class="headerlink" title="DataX的选型"></a>DataX的选型</h1><h2 id="一、需求"><a href="#一、需求" class="headerlink" title="一、需求"></a>一、需求</h2><p>作为数据平台管理员，还希望收集到更多运行细节，方便日常维护：</p><p>统计信息采集，例如运行时间、数据量、消耗资源<br>脏数据校验和上报<br>希望运行日志能接入公司的日志平台，方便监控</p><h2 id="二、选型"><a href="#二、选型" class="headerlink" title="二、选型"></a>二、选型</h2><blockquote><p>对象主要是 DataX 和 Sqoop</p></blockquote><table><thead><tr><th>功能</th><th>DataX</th><th>Sqoop</th></tr></thead><tbody><tr><td>运行模式</td><td>单进程多线程</td><td>MapReduce</td></tr><tr><td>MySQL读写</td><td>单机压力大；读写粒度容易控制</td><td>MapReduce 模式重，写出错处理麻烦</td></tr><tr><td>Hive读写</td><td>单机压力大</td><td>扩展性好</td></tr><tr><td>文件格式</td><td>orc支持</td><td>orc不支持，可添加</td></tr><tr><td>分布式</td><td>不支持，可以通过调度系统规避</td><td>支持</td></tr><tr><td>流控</td><td>有流控功能</td><td>需要定制</td></tr><tr><td>统计信息</td><td>已有一些统计，上报需定制</td><td>没有，分布式的数据收集不方便</td></tr><tr><td>数据校验</td><td>在core部分有校验功能</td><td>没有，分布式的数据收集不方便</td></tr><tr><td>监控</td><td>需要定制</td><td>需要定制</td></tr><tr><td>社区</td><td>开源不久，社区不活跃</td><td>一直活跃，核心部分变动很少</td></tr></tbody></table><blockquote><p>DataX 主要的缺点在于单机运行，而这个可以通过调度系统规避，其他方面的功能均优于 Sqoop，最终我们选择了基于 DataX 开发。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KylinApi使用</title>
      <link href="/2018/08/22/KylinApi%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/08/22/KylinApi%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="用-API-构建-Cube"><a href="#用-API-构建-Cube" class="headerlink" title="用 API 构建 Cube"></a>用 API 构建 Cube</h2><h3 id="1-认证"><a href="#1-认证" class="headerlink" title="1. 认证"></a>1. 认证</h3><ul><li>目前Kylin使用basic authentication。</li><li>给第一个请求加上用于认证的 Authorization 头部。</li><li>或者进行一个特定的请求: POST <a href="http://localhost:7070/kylin/api/user/authentication" target="_blank" rel="noopener">http://localhost:7070/kylin/api/user/authentication</a> 。</li><li>完成认证后, 客户端可以在接下来的请求里带上cookie。</li></ul><h3 id="2-获取Cube的详细信息"><a href="#2-获取Cube的详细信息" class="headerlink" title="2. 获取Cube的详细信息"></a>2. 获取Cube的详细信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:7070/kylin/api/cubes?cubeName=&#123;cube_name&#125;&amp;limit=15&amp;offset=0</span><br></pre></td></tr></table></figure><blockquote><p>用户可以在返回的cube详细信息里找到cube的segment日期范围。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># example</span><br><span class="line">http://hadoop01:7070/kylin/api/cubes?cubeName=kylin_sales_cube&amp;limit=15&amp;offset=0</span><br></pre></td></tr></table></figure><h3 id="3-然后提交cube构建任务"><a href="#3-然后提交cube构建任务" class="headerlink" title="3. 然后提交cube构建任务"></a>3. 然后提交cube构建任务</h3><p><code>PUT http://localhost:7070/kylin/api/cubes/{cube_name}/rebuild</code><br>关于 put 的请求体细节请参考 Build Cube API</p><ul><li><p>startTime 和 endTime 应该是utc时间。</p></li><li><p>buildType 可以是 BUILD 、 MERGE 或 REFRESH。 BUILD 用于构建一个新的segment， REFRESH 用于刷新一个已有的segment， MERGE 用于合并多个已有的segment生成一个较大的segment。</p></li><li><p>这个方法会返回一个新建的任务实例，它的uuid是任务的唯一id，用于追踪任务状态。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PUT http://localhost:7070/kylin/api/cubes/test_kylin_cube_with_slr/rebuild</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;startTime&quot;: 0,</span><br><span class="line">    &quot;endTime&quot;: 1388563200000,</span><br><span class="line">    &quot;buildType&quot;: &quot;BUILD&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-跟踪任务状态"><a href="#4-跟踪任务状态" class="headerlink" title="4. 跟踪任务状态"></a>4. 跟踪任务状态</h3><p><code>GET http://localhost:7070/kylin/api/jobs/{job_uuid}</code><br>返回的 <code>job_status</code> 代表job的当前状态。</p><h3 id="5-如果构建任务出现错误，可以重新开始它"><a href="#5-如果构建任务出现错误，可以重新开始它" class="headerlink" title="5. 如果构建任务出现错误，可以重新开始它"></a>5. 如果构建任务出现错误，可以重新开始它</h3><p><code>PUT http://localhost:7070/kylin/api/jobs/{job_uuid}/resume</code></p>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL标准模版库</title>
      <link href="/2018/08/09/STL%E6%A0%87%E5%87%86%E6%A8%A1%E7%89%88%E5%BA%93/"/>
      <url>/2018/08/09/STL%E6%A0%87%E5%87%86%E6%A8%A1%E7%89%88%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h5 id="string"><a href="#string" class="headerlink" title="string"></a>string</h5><ul><li><p>可以通过printf输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> str = <span class="string">"abcd"</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>,str.c_str())</span><br></pre></td></tr></table></figure></li><li><p>It can use operator ‘+’ to add two string variable</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stirng str1 = <span class="string">"abc"</span>, str2 = <span class="string">"xyz"</span>, str3;</span><br><span class="line">str3 = str1 + str2;</span><br></pre></td></tr></table></figure></li></ul><p>-Two string type variables can be directly compared using ==, &lt;&gt;, and the comparison rule is alphabet order.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stirng str1 = <span class="string">"abc"</span>, str2 = <span class="string">"xyz"</span>;</span><br><span class="line"><span class="keyword">if</span>(str2&gt;str1) <span class="built_in">printf</span>(<span class="string">"OK!\n"</span>);</span><br><span class="line"><span class="comment">// The result is the "OK!" will be print.</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kylin 在 CDH 中的安装</title>
      <link href="/2018/07/21/Kylin-%E5%9C%A8-CDH-%E4%B8%AD%E7%9A%84%E5%AE%89%E8%A3%85/"/>
      <url>/2018/07/21/Kylin-%E5%9C%A8-CDH-%E4%B8%AD%E7%9A%84%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Apache-Kylin"><a href="#Apache-Kylin" class="headerlink" title="Apache Kylin"></a>Apache Kylin</h1><p>中文名麒（shen）麟（shou） 是Hadoop动物园的重要成员。Apache Kylin是一个开源的分布式分析引擎，最初由eBay开发贡献至开源社区。它提供Hadoop之上的SQL查询接口及多维分析（OLAP）能力以支持大规模数据，能够处理TB乃至PB级别的分析任务，能够在亚秒级查询巨大的Hive表，并支持高并发。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>CDH 5.10.0</li><li>apache-kylin-1.6.0-cdh5.7-bin<blockquote><p>官网建议 CDH 5.10 安装 Kylin 2.0 ，尝试后发现部分查询有问题，后又换成 1.6.0 版本</p></blockquote></li></ul><h3 id="下载并解压到-opt-目录"><a href="#下载并解压到-opt-目录" class="headerlink" title="下载并解压到 /opt 目录"></a>下载并解压到 /opt 目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar zvxf apache-kylin-1.5.2.1-cdh5.7-bin.tar -C /opt</span><br><span class="line">mv /opt/apache-kylin-1.6.0-cdh5.7-bin /opt/kylin-1.6.0</span><br></pre></td></tr></table></figure><h3 id="赋予权限"><a href="#赋予权限" class="headerlink" title="赋予权限"></a>赋予权限</h3><ul><li>kylin 运行用户必须有，hdfs,hive,hbase 操作权限</li><li>/opt/kylin-1.6.0 以下目录，当前用户必须有读写修改权限</li></ul><h3 id="环境变量-etc-profile"><a href="#环境变量-etc-profile" class="headerlink" title="环境变量 /etc/profile"></a>环境变量 /etc/profile</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export KYLIN_HOME=/opt/kylin-1.6.0</span><br><span class="line">export HCAT_HOME=/opt/cloudera/parcels/CDH/lib/hive-hcatalog</span><br></pre></td></tr></table></figure><blockquote><p>由于使用的是 CDH 集群，其它组件环境已经配置好，只需配以上变量即可</p></blockquote><h3 id="配置-kylin-properties"><a href="#配置-kylin-properties" class="headerlink" title="配置 kylin.properties"></a>配置 kylin.properties</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 修改</span><br><span class="line">kylin.hive.client=beeline</span><br><span class="line">kylin.hive.beeline.params=-n hive --hiveconf hive.security.authorization.sqlstd.confwhitelist.append=&apos;mapreduce.job.*|dfs.*&apos; -u &apos;jdbc:hive2://master:10000&apos;</span><br><span class="line"># 增加</span><br><span class="line">kylin.job.jar=/opt/kylin-1.6.0/lib/kylin-job-1.6.0.jar</span><br><span class="line">kylin.coprocessor.local.jar=/opt/kylin-1.6.0/lib/kylin-coprocessor-1.6.0.jar</span><br><span class="line">kylin.job.yarn.app.rest.check.status.url=http://master:8088/ws/v1/cluster/apps/$&#123;job_id&#125;?anonymous=true</span><br><span class="line"># kylin.job.mr.lib.dir=/opt/cloudera/parcels/CDH/lib/sentry/lib</span><br></pre></td></tr></table></figure><h3 id="环境检查"><a href="#环境检查" class="headerlink" title="环境检查"></a>环境检查</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /opt/kylin-1.6.0/bin 目录下</span></span><br><span class="line">./find-hive-dependency.sh</span><br><span class="line">./find-hbase-dependency.sh</span><br><span class="line">./check-env.sh</span><br></pre></td></tr></table></figure><h3 id="导入测试数据"><a href="#导入测试数据" class="headerlink" title="导入测试数据"></a>导入测试数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./sample.sh</span><br></pre></td></tr></table></figure><h3 id="启动-Kylin"><a href="#启动-Kylin" class="headerlink" title="启动 Kylin"></a>启动 Kylin</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kylin.sh start</span><br></pre></td></tr></table></figure><h3 id="访问-web-界面"><a href="#访问-web-界面" class="headerlink" title="访问 web 界面"></a>访问 web 界面</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">登录后台：http://xxxxx:7070/kylin</span><br><span class="line">账号密码：ADMIN/KYLIN</span><br></pre></td></tr></table></figure><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><h3 id="HDFS-权限"><a href="#HDFS-权限" class="headerlink" title="HDFS 权限"></a>HDFS 权限</h3><ul><li><code>dfs.permissions</code> 设置为 <code>false</code></li><li>目录权限可使用，<code>hdfs dfs -chmod -R 777 /</code></li></ul><h3 id="kylin-2-0-版本中查询问题"><a href="#kylin-2-0-版本中查询问题" class="headerlink" title="kylin 2.0 版本中查询问题"></a>kylin 2.0 版本中查询问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kylin.sh org.apache.kylin.storage.hbase.util.DeployCoprocessorCLI /opt/kylin-1.6.0/lib/kylin-coprocessor-1.6.0.jar all</span><br></pre></td></tr></table></figure><h3 id="构建-Cube-出错"><a href="#构建-Cube-出错" class="headerlink" title="构建 Cube 出错"></a>构建 Cube 出错</h3><p>一直卡在构建 cube 的第三步，相应 mapreduce 任务在 map 阶段出错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: java.lang.ClassNotFoundException: org.apache.hadoop.hive.serde2.typeinfo.TypeInfo at java.net.URLClassLoader$1.run(URLClassLoader.java:366) at java.net.URLClassLoader$1.run(URLClassLoader.java:355) at java.security.AccessController.doPrivileged(Native Method) at java.net.URLClassLoader.findClass(URLClassLoader.java:354) at java.lang.ClassLoader.loadClass(ClassLoader.java:425) at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308) at java.lang.ClassLoader.loadClass(ClassLoader.java:358) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:270) at org.apache.hadoop.conf.Configuration.getClassByNameOrNull(Configuration.java:2138) at org.apache.hadoop.conf.Configuration.getClassByName(Configuration.java:2103) at org.apache.hadoop.conf.Configuration.getClass(Configuration.java:2197) at org.apache.hadoop.mapreduce.task.JobContextImpl.getInputFormatClass(JobContextImpl.java:184) at org.apache.hadoop.mapred.MapTask.runNewMapper(MapTask.java:749) at org.apache.hadoop.mapred.MapTask.run(MapTask.java:341) at org.apache.hadoop.mapred.YarnChild$2.run(YarnChild.java:164) at java.security.AccessController.doPrivileged(Native Method) at javax.security.auth.Subject.doAs(Subject.java:415) at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1796) at org.apache.hadoop.mapred.YarnChild.main(YarnChild.java:158)</span><br></pre></td></tr></table></figure><p>google 一番后,发现如下解决方案</p><p>最后在 <code>kylin.properties</code> 中添加 <code>kylin.job.mr.lib.dir=/opt/cloudera/parcels/CDH/lib/sentry/lib</code> 解决</p>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CDH集群安装笔记</title>
      <link href="/2018/07/20/CDH%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/07/20/CDH%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="CDH-集群安装笔记"><a href="#CDH-集群安装笔记" class="headerlink" title="CDH 集群安装笔记"></a>CDH 集群安装笔记</h1><blockquote><p>由于项目的需要，我在实验室的一台安装了 VMware ESXi 的物理机上新建了 Centos 6.10 的虚拟机来安装 CDH 集群。</p></blockquote><p>新建的虚拟机如下：</p><ul><li>server: 10.1.18.140<ul><li>2 cpu</li><li>24 G 内存</li><li>400 G 硬盘</li></ul></li><li>agent： 10.1.18.14*<ul><li>12 G 内存</li><li>300 G 硬盘</li></ul></li></ul><blockquote><p>安装参考<a href="https://my.oschina.net/balajinima/blog/862969" target="_blank" rel="noopener">原文</a></p></blockquote><h2 id="一、关于-CDH-和-Cloudera-Manager"><a href="#一、关于-CDH-和-Cloudera-Manager" class="headerlink" title="一、关于 CDH 和 Cloudera Manager"></a>一、关于 CDH 和 Cloudera Manager</h2><p>CDH (Cloudera’s Distribution, including Apache Hadoop)，是 Hadoop 众多分支中的一种，由 Cloudera 维护，基于稳定版本的 Apache Hadoop 构建，并集成了很多补丁，可直接用于生产环境。</p><p>Cloudera Manager 则是为了便于在集群中进行 Hadoop 等大数据处理相关的服务安装和监控管理的组件，对集群中主机、Hadoop、Hive、Spark 等服务的安装配置管理做了极大简化。</p><h2 id="二、系统环境"><a href="#二、系统环境" class="headerlink" title="二、系统环境"></a>二、系统环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">操作系统：CentOS 6.8 x64</span><br><span class="line">Cloudera Manager：5.10.0</span><br><span class="line">CDH: 5.10.0</span><br><span class="line">KUDU: 1.2.0</span><br></pre></td></tr></table></figure><h2 id="三、安装包准备"><a href="#三、安装包准备" class="headerlink" title="三、安装包准备"></a>三、安装包准备</h2><blockquote><p>注意： 通过 Cloudera Manager 安装 parcel 时 sha1 格式的文件需要提前修改为 sha。</p></blockquote><h2 id="四、准备工作"><a href="#四、准备工作" class="headerlink" title="四、准备工作"></a>四、准备工作</h2><h3 id="1-更新系统（所有节点）"><a href="#1-更新系统（所有节点）" class="headerlink" title="1. 更新系统（所有节点）"></a>1. 更新系统（所有节点）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y update</span><br></pre></td></tr></table></figure><h3 id="2-网络配置（所有节点）"><a href="#2-网络配置（所有节点）" class="headerlink" title="2. 网络配置（所有节点）"></a>2. 网络配置（所有节点）</h3><p>修改 hostname：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network</span><br></pre></td></tr></table></figure><p>编辑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NETWORKING=yes</span><br><span class="line">HOSTNAME= hadoop00</span><br></pre></td></tr></table></figure><p>通过 service network restart 重启网络服务生效。</p><p>修改 ip 与主机名的对应关系</p><p>vi /etc/hosts</p><p>编辑</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10.1.18.24* hadoop0*</span><br><span class="line">...</span><br><span class="line"><span class="comment"># 将 * 换成正确的IP</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：这里需要将每台机器的 ip 及主机名对应关系都写进去，本机的也要写进去，否则启动 Agent 的时候会提示 hostname 解析错误。</p></blockquote><h3 id="3-配置公钥认证-用于免密登录"><a href="#3-配置公钥认证-用于免密登录" class="headerlink" title="3. 配置公钥认证 (用于免密登录)"></a>3. 配置公钥认证 (用于免密登录)</h3><p>在管理节点（hadoop00）上执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -P &apos;&apos; -f /.ssh/id_rsa</span><br></pre></td></tr></table></figure><p>使用<code>ssh-copy-id IP</code>将公钥添加到认证文件中</p><h3 id="4-关闭防火墙和-SELinux（所有节点）"><a href="#4-关闭防火墙和-SELinux（所有节点）" class="headerlink" title="4. 关闭防火墙和 SELinux（所有节点）"></a>4. 关闭防火墙和 SELinux（所有节点）</h3><blockquote><p>注意：需要在所有的节点上执行，因为涉及到的端口太多了，临时关闭防火墙是为了安装起来更方便，安装完毕后可以根据需要设置防火墙策略，保证集群安全。</p></blockquote><p>关闭防火墙：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service iptables stop （临时关闭）  </span><br><span class="line">chkconfig iptables off （重启后生效）</span><br></pre></td></tr></table></figure><p>关闭 SELINUX（实际安装过程中发现没有关闭也是可以的，不知道会不会有问题，还需进一步进行验证）:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0 （临时生效）  </span><br><span class="line">修改 /etc/selinux/config 下的 SELINUX=disabled （重启后永久生效）</span><br></pre></td></tr></table></figure><h3 id="5-配置-NTP-服务"><a href="#5-配置-NTP-服务" class="headerlink" title="5. 配置 NTP 服务"></a>5. 配置 NTP 服务</h3><p>yum 安装 ntp(所有节点):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install ntp</span><br></pre></td></tr></table></figure><p>在配置之前，先使用 ntpdate 手动同步一下时间，免得本机与对时中心时间差距太大，使得 ntpd 不能正常同步。这里选用 us.pool.ntp.org 作为对时中心,ntpdate us.pool.ntp.org。</p><blockquote><p>按照 Cloudera 的官方建议，所有的 CDH 节点和 Cloudea Manager 节点都需要启动 ntpd 服务。要不然会报如下错误：<br>此角色的主机的运行状况为不良。 以下运行状况测试不良： 时钟偏差.</p></blockquote><blockquote><p>解决方法如下： 先配置一台 NTP 服务，然后所有的 CDH 节点都作为此 NTP 服务的客户端。 </p></blockquote><h3 id="8-安装-Oracle-的-Java（主节点安装，其他节点卸载）"><a href="#8-安装-Oracle-的-Java（主节点安装，其他节点卸载）" class="headerlink" title="8. 安装 Oracle 的 Java（主节点安装，其他节点卸载）"></a>8. 安装 Oracle 的 Java（主节点安装，其他节点卸载）</h3><p>CentOS，自带 OpenJdk，不过运行 CDH5 需要使用 Oracle 的 Jdk，需要 Java 7 的支持。</p><p>卸载自带的 OpenJdk，使用 <code>rpm -qa | grep java</code> 查询 java 相关的包，使用 <code>rpm -e --nodeps 包名</code> 卸载。或者使用 <code>yum remove java</code> 卸载</p><p>在这里使用了 cloudera 仓库中的 jdk 的 rpm 安装包，使用rpm -ivh 包名进行安装。 配置环境变量：</p><p>修改 profile vi /etc/profile</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/java/jdk1.7.0_67-cloudera</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</span><br><span class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br></pre></td></tr></table></figure><p>立即生效 source /etc/profile</p><h3 id="10-安装-mysql-JDBC-驱动（管理节点）"><a href="#10-安装-mysql-JDBC-驱动（管理节点）" class="headerlink" title="10. 安装 mysql JDBC 驱动（管理节点）"></a>10. 安装 mysql JDBC 驱动（管理节点）</h3><p>下载 mysql JDBC 驱动放到目录 /usr/share/java/ 并修改名为 mysql-connector-java.jar 下载地址 <a href="http://www.mysql.com/downloads/connector/j/5.1.html" target="_blank" rel="noopener">http://www.mysql.com/downloads/connector/j/5.1.html</a>.</p><h2 id="五、安装配置-Cloudera-Manager（管理节点）"><a href="#五、安装配置-Cloudera-Manager（管理节点）" class="headerlink" title="五、安装配置 Cloudera Manager（管理节点）"></a>五、安装配置 Cloudera Manager（管理节点）</h2><h3 id="1-建立-Cloudera-Manager-安装文件自定义存储库"><a href="#1-建立-Cloudera-Manager-安装文件自定义存储库" class="headerlink" title="1. 建立 Cloudera Manager 安装文件自定义存储库"></a>1. 建立 Cloudera Manager 安装文件自定义存储库</h3><h3 id="2-通过-rpm-安装包本地安装-Cloudera-Manager"><a href="#2-通过-rpm-安装包本地安装-Cloudera-Manager" class="headerlink" title="2. 通过 rpm 安装包本地安装 Cloudera Manager"></a>2. 通过 rpm 安装包本地安装 Cloudera Manager</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /path/to/RPMS/x86_64</span></span><br><span class="line">yum --nogpgcheck localinstall cloudera-manager-daemons-5.10.*.rpm cloudera-manager-server-5.10.*.rpm enterprise-debuginfo-5.10.*.rpm</span><br></pre></td></tr></table></figure><h3 id="3-Parcel-和-csd-格式文件上传"><a href="#3-Parcel-和-csd-格式文件上传" class="headerlink" title="3.Parcel 和 csd 格式文件上传"></a>3.Parcel 和 csd 格式文件上传</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CDH-5.10.0-1.cdh5.10.0.p0.41-el6.parcel</span><br><span class="line">CDH-5.10.0-1.cdh5.10.0.p0.41-el6.parcel.sha</span><br><span class="line">manifest.json</span><br></pre></td></tr></table></figure><h3 id="4-配置-Cloudera-Manager-Server-数据库"><a href="#4-配置-Cloudera-Manager-Server-数据库" class="headerlink" title="4. 配置 Cloudera Manager Server 数据库"></a>4. 配置 Cloudera Manager Server 数据库</h3><p>使用命令 scm_prepare_database.sh 创建 Cloudera Manager Server 数据库配置文件</p><p>命令格式如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/share/cmf/schema/scm_prepare_database.sh database-type [options] database-name username password</span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/share/cmf/schema/scm_prepare_database.sh mysql -hlocalhost -uroot -p123456 --scm-host localhost scm scm scm</span><br></pre></td></tr></table></figure><p>执行完成后生成数据库配置文件/etc/cloudera-scm-server/db.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Auto-generated by scm_prepare_database.sh on Tue Feb 28 18:23:16 CST 2017</span><br><span class="line">#</span><br><span class="line"># For information describing how to configure the Cloudera Manager Server</span><br><span class="line"># to connect to databases, see the &quot;Cloudera Manager Installation Guide.&quot;</span><br><span class="line">#</span><br><span class="line">com.cloudera.cmf.db.type=mysql</span><br><span class="line">com.cloudera.cmf.db.host=localhost</span><br><span class="line">com.cloudera.cmf.db.name=scm</span><br><span class="line">com.cloudera.cmf.db.user=scm</span><br><span class="line">com.cloudera.cmf.db.password=scm</span><br><span class="line">com.cloudera.cmf.db.setupType=EXTERNAL</span><br></pre></td></tr></table></figure><h3 id="5-启动-Cloudera-Manager-Server"><a href="#5-启动-Cloudera-Manager-Server" class="headerlink" title="5. 启动 Cloudera Manager Server"></a>5. 启动 Cloudera Manager Server</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service cloudera-scm-server start</span><br></pre></td></tr></table></figure><blockquote><p>等待大概两分钟，访问 <a href="http://10.1.18.240:7180/" target="_blank" rel="noopener">http://10.1.18.240:7180/</a> 进入管理端 (登陆名: admin 密码: admin)</p></blockquote><h3 id="6-配置"><a href="#6-配置" class="headerlink" title="6. 配置"></a>6. 配置</h3><blockquote><p>自行配置</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>logging的使用</title>
      <link href="/2018/07/04/logging%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/07/04/logging%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h5 id="A-simple-example"><a href="#A-simple-example" class="headerlink" title="A simple example"></a>A simple example</h5><ul><li>the default log of level is WARNING<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.warning(<span class="string">'Watch out!'</span>)  <span class="comment"># will print a message to the console</span></span><br><span class="line">logging.info(<span class="string">'I told you so'</span>)  <span class="comment"># will not print anything</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WARNING:root:Watch out!</span><br></pre></td></tr></table></figure><h5 id="Logging-to-a-file"><a href="#Logging-to-a-file" class="headerlink" title="Logging to a file"></a>Logging to a file</h5><blockquote><p>主要说明如何将日志打印到文件中,以及如何刷新日志(不保留原有的日志). </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="comment"># set filename and log level</span></span><br><span class="line">logging.basicConfig(filename=<span class="string">'example.log'</span>,level=logging.DEBUG)</span><br><span class="line"><span class="comment"># If you want each run to start afresh, not remembering the messages from earlier runs, you can specify the filemode argument, </span></span><br><span class="line"><span class="comment"># logging.basicConfig(filename='example.log', filemode='w', level=logging.DEBUG)</span></span><br><span class="line">logging.debug(<span class="string">'This message should go to the log file'</span>)</span><br><span class="line">logging.info(<span class="string">'So should this'</span>)</span><br><span class="line">logging.warning(<span class="string">'And this, too'</span>)</span><br></pre></td></tr></table></figure><h5 id="Logging-variable-data"><a href="#Logging-variable-data" class="headerlink" title="Logging variable data"></a>Logging variable data</h5><blockquote><p>主要说明日志输出是可以使用变量的</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.warning(<span class="string">'%s before you %s'</span>, <span class="string">'Look'</span>, <span class="string">'leap!'</span>)</span><br></pre></td></tr></table></figure><h5 id="Changing-the-format-of-displayed-messages"><a href="#Changing-the-format-of-displayed-messages" class="headerlink" title="Changing the format of displayed messages"></a>Changing the format of displayed messages</h5><blockquote><p>主要说明如何改变日志输出格式以及是时间输出格式如何改变</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="comment"># you can use 'format=' to formulate what you want output</span></span><br><span class="line">logging.basicConfig(format=<span class="string">'%(levelname)s:%(message)s'</span>, level=logging.DEBUG)</span><br><span class="line">logging.debug(<span class="string">'This message should appear on the console'</span>)</span><br><span class="line">logging.info(<span class="string">'So should this'</span>)</span><br><span class="line">logging.warning(<span class="string">'And this, too'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># detefmt can formulate format of date</span></span><br><span class="line">logging.basicConfig(format=<span class="string">'%(asctime)s %(message)s'</span>, datefmt=<span class="string">'%m/%d/%Y %I:%M:%S %p'</span>)</span><br><span class="line">logging.warning(<span class="string">'is when this event was logged.'</span>)</span><br></pre></td></tr></table></figure><h5 id="Configuring-Logging"><a href="#Configuring-Logging" class="headerlink" title="Configuring Logging"></a>Configuring Logging</h5><blockquote><p>主要说明日志如何新建日志的实例对象以及如何配置日志文件</p></blockquote><h6 id="建立日志对象"><a href="#建立日志对象" class="headerlink" title="建立日志对象"></a>建立日志对象</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># create logger</span></span><br><span class="line">logger = logging.getLogger(<span class="string">'simple_example'</span>)</span><br><span class="line">logger.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create console handler and set level to debug</span></span><br><span class="line">ch = logging.StreamHandler()</span><br><span class="line">ch.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create formatter</span></span><br><span class="line">formatter = logging.Formatter(<span class="string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add formatter to ch</span></span><br><span class="line">ch.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add ch to logger</span></span><br><span class="line">logger.addHandler(ch)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 'application' code</span></span><br><span class="line">logger.debug(<span class="string">'debug message'</span>)</span><br><span class="line">logger.info(<span class="string">'info message'</span>)</span><br><span class="line">logger.warn(<span class="string">'warn message'</span>)</span><br><span class="line">logger.error(<span class="string">'error message'</span>)</span><br><span class="line">logger.critical(<span class="string">'critical message'</span>)</span><br></pre></td></tr></table></figure><h6 id="建立日志对象并且读取日志配置文件"><a href="#建立日志对象并且读取日志配置文件" class="headerlink" title="建立日志对象并且读取日志配置文件"></a>建立日志对象并且读取日志配置文件</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> logging.config</span><br><span class="line"></span><br><span class="line">logging.config.fileConfig(<span class="string">'logging.conf'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create logger</span></span><br><span class="line">logger = logging.getLogger(<span class="string">'simpleExample'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 'application' code</span></span><br><span class="line">logger.debug(<span class="string">'debug message'</span>)</span><br><span class="line">logger.info(<span class="string">'info message'</span>)</span><br><span class="line">logger.warn(<span class="string">'warn message'</span>)</span><br><span class="line">logger.error(<span class="string">'error message'</span>)</span><br><span class="line">logger.critical(<span class="string">'critical message'</span>)</span><br></pre></td></tr></table></figure><p><strong>logging.conf</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[loggers]</span><br><span class="line">keys=root,simpleExample</span><br><span class="line"></span><br><span class="line">[handlers]</span><br><span class="line">keys=consoleHandler</span><br><span class="line"></span><br><span class="line">[formatters]</span><br><span class="line">keys=simpleFormatter</span><br><span class="line"></span><br><span class="line">[logger_root]</span><br><span class="line">level=DEBUG</span><br><span class="line">handlers=consoleHandler</span><br><span class="line"></span><br><span class="line">[logger_simpleExample]</span><br><span class="line">level=DEBUG</span><br><span class="line">handlers=consoleHandler</span><br><span class="line">qualname=simpleExample</span><br><span class="line">propagate=0</span><br><span class="line"></span><br><span class="line">[handler_consoleHandler]</span><br><span class="line">class=StreamHandler</span><br><span class="line">level=DEBUG</span><br><span class="line">formatter=simpleFormatter</span><br><span class="line">args=(sys.stdout,)</span><br><span class="line"></span><br><span class="line">[formatter_simpleFormatter]</span><br><span class="line">format=%(asctime)s - %(name)s - %(levelname)s - %(message)s</span><br><span class="line">datefmt=</span><br></pre></td></tr></table></figure><p><strong>another logging.conf</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">[loggers]</span><br><span class="line">keys=root,simple</span><br><span class="line"></span><br><span class="line">[handlers]</span><br><span class="line">keys=consoleHandler,fileHandler,rotatingFileHandler</span><br><span class="line"></span><br><span class="line">[formatters]</span><br><span class="line">keys=simpleFmt</span><br><span class="line"></span><br><span class="line">[logger_root]</span><br><span class="line">level=DEBUG</span><br><span class="line">handlers=consoleHandler</span><br><span class="line"># handlers=fileHandler</span><br><span class="line"># handlers=rotatingFileHandler</span><br><span class="line"></span><br><span class="line">[logger_simple]</span><br><span class="line">level=DEBUG</span><br><span class="line">handlers=consoleHandler,fileHandler</span><br><span class="line">qualname=simple</span><br><span class="line">propagate=0</span><br><span class="line"></span><br><span class="line">[handler_consoleHandler]</span><br><span class="line">class=StreamHandler</span><br><span class="line">level=DEBUG</span><br><span class="line">formatter=simpleFmt</span><br><span class="line">args=(sys.stdout,)</span><br><span class="line"></span><br><span class="line">[handler_fileHandler]</span><br><span class="line">class=FileHandler</span><br><span class="line">level=DEBUG</span><br><span class="line">formatter=simpleFmt</span><br><span class="line">args=(&apos;test.log&apos;, &apos;w&apos;)</span><br><span class="line"></span><br><span class="line">[handler_rotatingFileHandler]</span><br><span class="line">class=handlers.RotatingFileHandler</span><br><span class="line">level=DEBUG</span><br><span class="line">formatter=simpleFmt</span><br><span class="line">args=(&quot;python.log&quot;, &quot;a&quot;, 20*1024*1024, 10)</span><br><span class="line"></span><br><span class="line">[formatter_simpleFmt]</span><br><span class="line">format=%(asctime)s - %(name)s - %(levelname)s - %(message)s - [%(filename)s:%(lineno)s]</span><br><span class="line">datefmt=</span><br></pre></td></tr></table></figure><table><thead><tr><th>Level</th><th>Numeric value</th></tr></thead><tbody><tr><td>CRITICAL</td><td>50</td></tr><tr><td>ERROR</td><td>40</td></tr><tr><td>WARNING</td><td>30</td></tr><tr><td>INFO</td><td>20</td></tr><tr><td>DEBUG</td><td>10</td></tr><tr><td>NOTSET</td><td>0</td></tr></tbody></table><table><thead><tr><th>Format</th><th>Description</th></tr></thead><tbody><tr><td>%(levelno)s</td><td>打印日志级别的数值</td></tr><tr><td>%(levelname)s</td><td>打印日志级别名称</td></tr><tr><td>%(pathname)s</td><td>打印当前执行程序的路径，其实就是sys.argv[0]</td></tr><tr><td>%(filename)s</td><td>打印当前执行程序名</td></tr><tr><td>%(funcName)s</td><td>打印日志的当前函数</td></tr><tr><td>%(lineno)d</td><td>打印日志的当前行号</td></tr><tr><td>%(asctime)s</td><td>打印日志的时间</td></tr><tr><td>%(thread)d</td><td>打印线程ID</td></tr><tr><td>%(threadName)s</td><td>打印线程名称</td></tr><tr><td>%(process)d</td><td>打印进程ID</td></tr><tr><td>%(message)s</td><td>打印日志信息</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于tcp客户端</title>
      <link href="/2018/07/04/%E5%85%B3%E4%BA%8Etcp%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
      <url>/2018/07/04/%E5%85%B3%E4%BA%8Etcp%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="关于tcp客户端"><a href="#关于tcp客户端" class="headerlink" title="关于tcp客户端"></a>关于tcp客户端</h3><h4 id="请求代码"><a href="#请求代码" class="headerlink" title="请求代码"></a>请求代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">发送一个TCP请求总是需要</span></span><br><span class="line"><span class="string">1. 建立client</span></span><br><span class="line"><span class="string">2. 建立链接</span></span><br><span class="line"><span class="string">3. 发送数据</span></span><br><span class="line"><span class="string">4. 接收数据</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">target_host = <span class="string">'www.baidu.com'</span></span><br><span class="line">target_port = <span class="string">'80'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立一个socket对象</span></span><br><span class="line"><span class="comment"># AF_INET参数说明我们将使用标准的IPv4或者主机名</span></span><br><span class="line"><span class="comment"># SOCK_STREAM说明这将是一个TCP客户端</span></span><br><span class="line">client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接客户端</span></span><br><span class="line">client.connect((target_host, target_port))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送一些数据</span></span><br><span class="line">client.send(<span class="string">'GET / HTTP/1.1\r\nHost:baidu.com\r\n\r\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接受一些数据</span></span><br><span class="line">response = client.recv(<span class="number">4096</span>)</span><br><span class="line"></span><br><span class="line">print(response)</span><br></pre></td></tr></table></figure><h4 id="响应代码"><a href="#响应代码" class="headerlink" title="响应代码"></a>响应代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Length: 14615</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Date: Thu, 28 Jun 2018 07:58:23 GMT</span><br><span class="line">Last-Modified: Mon, 11 Jun 2018 11:19:00 GMT</span><br><span class="line">P3p: CP=&quot; OTI DSP COR IVA OUR IND COM &quot;</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Server: BWS/1.1</span><br><span class="line">Set-Cookie: BAIDUID=8D8D1B1785F34A55393458806C4E7D3B:FG=1; expires=Thu, 31-Dec-37 23:55:55 GMT; max-age=2147483647; path=/; domain=.baidu.com</span><br><span class="line">Set-Cookie: BIDUPSID=8D8D1B1785F34A55393458806C4E7D3B; expires=Thu, 31-Dec-37 23:55:55 GMT; max-age=2147483647; path=/; domain=.baidu.com</span><br><span class="line">Set-Cookie: PSTM=1530172703; expires=Thu, 31-Dec-37 23:55:55 GMT; max-age=2147483647; path=/; domain=.baidu.com</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">X-Ua-Compatible: IE=Edge,chrome=1</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//s1.bdstatic.com&quot;/&gt;</span><br><span class="line">&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//t1.baidu.com&quot;/&gt;</span><br><span class="line">&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//t2.baidu.com&quot;/&gt;</span><br><span class="line">&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//t3.baidu.com&quot;/&gt;</span><br><span class="line">&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//t10.baidu.com&quot;/&gt;</span><br><span class="line">&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//t11.baidu.com&quot;/&gt;</span><br><span class="line">&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//t12.baidu.com&quot;/&gt;</span><br><span class="line">&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//b1.bdstatic.com&quot;/&gt;</span><br><span class="line">&lt;title&gt;百度一下，你就知道&lt;/title&gt;</span><br><span class="line">&lt;link href=&quot;http://s1.bdstatic.com/r/www/cache/static/home/css/in</span><br></pre></td></tr></table></figure><hr><h4 id="bug说明"><a href="#bug说明" class="headerlink" title="bug说明"></a>bug说明</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SyntaxError: Non-ASCII character &apos;\xe5&apos; in file kNN.py on line 24, but no encoding declared; see http://python.org/dev/peps/pep-0263/ for details</span><br></pre></td></tr></table></figure><p>出现问题的原因：<br>Python默认是以ASCII作为编码方式的，如果在自己的Python源码中包含了中文（或者其他非英语系的语言），此时即使你把自己编写的Python源文件以UTF-8格式保存了，但实际上，这依然是不行的。<br>解决办法很简单，只要在文件开头加入下面代码就行了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: UTF-8 -*-</span><br></pre></td></tr></table></figure><hr><h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h4><h5 id="关于请求的解释"><a href="#关于请求的解释" class="headerlink" title="关于请求的解释"></a>关于请求的解释</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: www.baidu.com</span><br></pre></td></tr></table></figure><ul><li>首先有一个动词，我们叫HTTP Method，常见的有GET,POST,PUT,DELETE,OPTIONS,HEAD，不常见的有TRACE,CONNECT。</li><li>然后一个空格，后面接了一个/，表示我们请求这个站点的根目录，或者根网页。</li><li>再之后是HTTP/1.1，这是HTTP协议的版本号， 根据RFC说明，HTTP协议的版本号要支持多位数字的比较，而不能直接用ASCII比较，例如HTTP/11.22要比HTTP/2.1更大， 且版本号是HTTP/<major>.<minor>的方式，major是大版本，minor是小版本，例如:HTTP/0.9,HTTP/1.1,HTTP/2.0。</minor></major></li><li>然后是换行符。</li><li>在此之后，是Host: <a href="http://www.baidu.com，这叫virtual" target="_blank" rel="noopener">www.baidu.com，这叫virtual</a> host，是HTTP协议为了支持同一个IP上服务多个网站而来的，服务器通过判断 这个字段里的内容来将一个请求打到不同的内容服务器上。</li><li>在之后是两个换行符。<blockquote><p>请注意，HTTP协议中的换行，是\r\n，所以上面这个请求，把换行符和空格打出来，实际上是这样的：</p></blockquote></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET&lt;space&gt;/&lt;space&gt;HTTP/1.1\r\nHost:&lt;space&gt;www.baidu.com\r\n\r\n</span><br></pre></td></tr></table></figure><ul><li>两个\r\n表示HTTP协议内容头部的结束，正文的开始，当然也可以不接正文。正文也是各种各样的字符串，那么问题来了，服务器怎么知道 客户端请求里带的是什么内容呢？所以有一个头部叫做Content-Type，他就是用来表明此次携带的内容类型是什么，例如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: www.baidu.com</span><br><span class="line">Content-Type: text/html</span><br></pre></td></tr></table></figure></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown使用方法</title>
      <link href="/2018/07/04/markdown%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2018/07/04/markdown%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="1-书写数学公式"><a href="#1-书写数学公式" class="headerlink" title="1. 书写数学公式"></a>1. <strong>书写数学公式</strong></h2><p><img src="https://note.youdao.com/favicon.ico" alt="image"><br><img src="http://note.youdao.com/iyoudao/wp-content/uploads/2016/09/%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F.png" alt="image"></p><h4 id="1-希腊字母"><a href="#1-希腊字母" class="headerlink" title="1. 希腊字母"></a>1. 希腊字母</h4><p><code>$ $</code></p><table><thead><tr><th>语法</th><th>符号</th></tr></thead><tbody><tr><td>\alpha</td><td><code>$ \alpha $</code></td></tr><tr><td>\beta</td><td><code>$ \beta $</code></td></tr><tr><td>\gamma</td><td><code>$ \gamma $</code></td></tr><tr><td>\Gamma</td><td><code>$ \Gamma $</code></td></tr><tr><td>\delta</td><td><code>$ \delta $</code></td></tr><tr><td>\epsilon</td><td><code>$ \epsilon $</code></td></tr><tr><td>\varepsilon</td><td><code>$ \varepsilon $</code></td></tr><tr><td>\zeta</td><td><code>$ \zeta $</code></td></tr><tr><td>\eta</td><td><code>$ \eta $</code></td></tr><tr><td>\theta</td><td><code>$ \theta $</code></td></tr><tr><td>\Theta</td><td><code>$ \Theta $</code></td></tr><tr><td>\vartheta</td><td><code>$ \vartheta $</code></td></tr><tr><td>\iota</td><td><code>$ \iota $</code></td></tr><tr><td>\kappa</td><td><code>$ \kappa $</code></td></tr><tr><td>\lambda</td><td><code>$ \lambda $</code></td></tr><tr><td>\Lambda</td><td><code>$ \Lambda $</code></td></tr><tr><td>\mu</td><td><code>$ \mu $</code></td></tr><tr><td>\nu</td><td><code>$ \nu $</code></td></tr><tr><td>\xi</td><td><code>$ \xi $</code></td></tr><tr><td>\Xi</td><td><code>$ \Xi $</code></td></tr><tr><td>\pi</td><td><code>$ \pi $</code></td></tr><tr><td>\Pi</td><td><code>$ \Pi $</code></td></tr><tr><td>\varpi</td><td><code>$ \varpi $</code></td></tr><tr><td>\rho</td><td><code>$ \rho $</code></td></tr><tr><td>\varrho</td><td><code>$ \varrho $</code></td></tr><tr><td>\sigma</td><td><code>$ \sigma $</code></td></tr><tr><td>\Sigma</td><td><code>$ \Sigma $</code></td></tr><tr><td>\varsigma</td><td><code>$ \varsigma $</code></td></tr><tr><td>\tau</td><td><code>$ \tau $</code></td></tr><tr><td>\upsilon</td><td><code>$ \upsilon $</code></td></tr><tr><td>\Upsilon</td><td><code>$ \Upsilon $</code></td></tr><tr><td>\phi</td><td><code>$ \phi $</code></td></tr><tr><td>\Phi</td><td><code>$ \Phi $</code></td></tr><tr><td>\varphi</td><td><code>$ \varphi $</code></td></tr><tr><td>\chi</td><td><code>$ \chi $</code></td></tr><tr><td>\psi</td><td><code>$ \psi $</code></td></tr><tr><td>\Psi</td><td><code>$ \Psi $</code></td></tr><tr><td>\Omega</td><td><code>$ \Omega $</code></td></tr><tr><td>\omega</td><td><code>$ \omega $</code></td></tr></tbody></table><h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><table><thead><tr><th>语法</th><th>符号</th></tr></thead><tbody><tr><td>\vec{a}</td><td><code>$\vec{a}$</code></td></tr><tr><td>\overline{a</td><td><code>$\overline{a}$</code></td></tr><tr><td>\widehat{a}</td><td><code>$\widehat{a}$</code></td></tr><tr><td>\widetilde{a}</td><td><code>$\widetilde{a}$</code></td></tr><tr><td>\dot{a}</td><td><code>$\dot{a}$</code></td></tr><tr><td>\ddot{a}</td><td><code>$\ddot{a}$</code></td></tr></tbody></table><h4 id="3-符号"><a href="#3-符号" class="headerlink" title="3 符号"></a>3 符号</h4>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置zsh</title>
      <link href="/2018/07/04/%E9%85%8D%E7%BD%AEzsh/"/>
      <url>/2018/07/04/%E9%85%8D%E7%BD%AEzsh/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a><a href="https://a1049145827.github.io/2018/11/12/Ubuntu-16-04%E4%B8%8B%E5%AE%89%E8%A3%85zsh%E5%92%8Coh-my-zsh/" target="_blank" rel="noopener">Linux</a></h3><p>安装及配置 zsh<br>1、安装zsh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install zsh</span><br></pre></td></tr></table></figure><p>2、把默认的 Shell 改成 zsh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure><p>注意：不要使用 sudo。</p><p>3、安装 Git</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><p>4、安装 oh-my-zsh</p><p>为什么要安装，用于快速配置 zsh。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongodb关于用户的操作</title>
      <link href="/2018/07/04/mongodb%E5%85%B3%E4%BA%8E%E7%94%A8%E6%88%B7%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/07/04/mongodb%E5%85%B3%E4%BA%8E%E7%94%A8%E6%88%B7%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="用户认证"><a href="#用户认证" class="headerlink" title="用户认证"></a>用户认证</h4><p>在使用的时候如果遇到没有权限使用这个数据库,说明你的用户没有权限,所以需要一个用户认证,认证这个用户拥有这个权限</p><blockquote><p>注意:帐号是跟着库走的，所以在指定库里授权，必须也在指定库里验证(auth)。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; use admin</span><br><span class="line">&gt; db.auth(&apos;vallzey&apos;,&apos;密码&apos;)</span><br></pre></td></tr></table></figure><h4 id="查看这个数据库下的所有用户"><a href="#查看这个数据库下的所有用户" class="headerlink" title="查看这个数据库下的所有用户"></a>查看这个数据库下的所有用户</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; show users</span><br><span class="line">&#123;</span><br><span class="line">&quot;_id&quot; : &quot;admin.vallzey&quot;,</span><br><span class="line">&quot;user&quot; : &quot;vallzey&quot;,</span><br><span class="line">&quot;db&quot; : &quot;admin&quot;,</span><br><span class="line">&quot;roles&quot; : [</span><br><span class="line">&#123;</span><br><span class="line">&quot;role&quot; : &quot;userAdminAnyDatabase&quot;,</span><br><span class="line">&quot;db&quot; : &quot;admin&quot;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建对应数据库的用户"><a href="#创建对应数据库的用户" class="headerlink" title="创建对应数据库的用户"></a>创建对应数据库的用户</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.createUser(</span><br><span class="line">... &#123;</span><br><span class="line">... user:&quot;testad&quot;,</span><br><span class="line">... pwd:&quot;test&quot;,</span><br><span class="line">... roles:[&#123;role:&quot;dbAdmin&quot;,db:&quot;test&quot;&#125;]</span><br><span class="line">... &#125;</span><br><span class="line">... )</span><br></pre></td></tr></table></figure><p>roles:[{role:”readWrite”,db:”test”}]的意思是对对应的数据库创建对应的权限</p><h4 id="对用户进行授权"><a href="#对用户进行授权" class="headerlink" title="对用户进行授权"></a>对用户进行授权</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.grantRolesToUser(&apos;testad&apos;,[&#123;role:&quot;readWrite&quot;,db:&quot;test&quot;&#125;])</span><br></pre></td></tr></table></figure><h4 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.dropUser(&apos;test&apos;)</span><br><span class="line">true</span><br></pre></td></tr></table></figure><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><p>删除数据库要在对应的数据库中,而且该用户具有相应的用户权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.dropDatabase()</span><br><span class="line">&#123; &quot;dropped&quot; : &quot;runoob&quot;, &quot;ok&quot; : 1 &#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>角色类型</th><th>角色名</th></tr></thead><tbody><tr><td>数据库用户角色</td><td>read、readWrite</td></tr><tr><td>数据库管理角色</td><td>dbAdmin、dbOwner、userAdmin</td></tr><tr><td>集群管理角色</td><td>clusterAdmin、clusterManager、clusterMonitor、hostManager</td></tr><tr><td>备份恢复角色</td><td>backup、restore</td></tr><tr><td>所有数据库角色</td><td>readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase</td></tr><tr><td>超级用户角色</td><td>root (dbOwner 、userAdmin、userAdminAnyDatabase)</td></tr><tr><td>内部角色</td><td>__system</td></tr></tbody></table><table><thead><tr><th>角色名</th><th>角色权限</th></tr></thead><tbody><tr><td>Read</td><td>允许用户读取指定数据库</td></tr><tr><td>readWrite</td><td>允许用户读写指定数据库</td></tr><tr><td>dbAdmin</td><td>允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile</td></tr><tr><td>userAdmin</td><td>允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户</td></tr><tr><td>clusterAdmin</td><td>只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限</td></tr><tr><td>readAnyDatabase</td><td>只在admin数据库中可用，赋予用户所有数据库的读权限</td></tr><tr><td>readWriteAnyDatabase</td><td>只在admin数据库中可用，赋予用户所有数据库的读写权限</td></tr><tr><td>userAdminAnyDatabase</td><td>只在admin数据库中可用，赋予用户所有数据库的userAdmin权限</td></tr><tr><td>dbAdminAnyDatabase</td><td>只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限</td></tr><tr><td>root</td><td>只在admin数据库中可用。超级账号，超级权限</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu桌面快捷设置</title>
      <link href="/2018/07/03/Ubuntu%E6%A1%8C%E9%9D%A2%E5%BF%AB%E6%8D%B7%E8%AE%BE%E7%BD%AE/"/>
      <url>/2018/07/03/Ubuntu%E6%A1%8C%E9%9D%A2%E5%BF%AB%E6%8D%B7%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="Ubuntu桌面快捷"><a href="#Ubuntu桌面快捷" class="headerlink" title="Ubuntu桌面快捷"></a>Ubuntu桌面快捷</h3><h5 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/share/applications</span><br></pre></td></tr></table></figure><h5 id="使用gedit创建文件"><a href="#使用gedit创建文件" class="headerlink" title="使用gedit创建文件"></a>使用gedit创建文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit navicat.desktop</span><br></pre></td></tr></table></figure><h5 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h5><ul><li>例子1</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Encoding=UTF-8</span><br><span class="line">Name=Navicat</span><br><span class="line">Comment=Navicat Premium</span><br><span class="line">Exec=/opt/Navicat/start_navicat</span><br><span class="line">Icon=/opt/Navicat/navicat.png</span><br><span class="line">Terminal=false</span><br><span class="line">StartupNotify=true</span><br><span class="line">Type=Application</span><br><span class="line">Categories=Application;Development;</span><br></pre></td></tr></table></figure><ul><li>例子2</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Encoding=UTF-8</span><br><span class="line">Version=1.0</span><br><span class="line">Type=Application</span><br><span class="line">Terminal=false</span><br><span class="line">Name=Telegram Desktop</span><br><span class="line">Exec=/opt/telegram/Telegram -- %u</span><br><span class="line">Comment=Official desktop version of Telegram messaging app</span><br><span class="line">Icon=/opt/telegram/telegram.svg</span><br><span class="line">StartupWMClass=Telegram</span><br><span class="line">Categories=GNOME;GTK;Network;</span><br><span class="line">MimeType=application/x-xdg-protocol-tg;x-scheme-handler/tg;</span><br><span class="line">X-Desktop-File-Install-Version=0.22</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 系统命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 系统命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令(长期更新)</title>
      <link href="/2018/06/06/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0/"/>
      <url>/2018/06/06/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="Ubuntu下的一些命令"><a href="#Ubuntu下的一些命令" class="headerlink" title="Ubuntu下的一些命令"></a>Ubuntu下的一些命令</h3><h5 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h5><ul><li>扫描所有的局域网IP<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -v -sP 10.1.18.0/24</span><br></pre></td></tr></table></figure></li></ul><h5 id="display-service-显示服务"><a href="#display-service-显示服务" class="headerlink" title="display service(显示服务)**"></a>display service(显示服务)**</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Temporarily turn off the display service</span></span><br><span class="line">sudo service lightdm stop</span><br><span class="line"><span class="comment"># turn on the display service</span></span><br><span class="line">sudo service lightdm start</span><br></pre></td></tr></table></figure><h5 id="use-‘curl’-send-a-post-request"><a href="#use-‘curl’-send-a-post-request" class="headerlink" title="use ‘curl’ send a post request"></a>use ‘curl’ send a post request</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># post</span></span><br><span class="line">curl -d <span class="string">"opr=pwdLogin&amp;userName=171050050&amp;pwd=0050131579&amp;rememberPwd=1"</span> <span class="string">"http://2.2.2.2/ac_portal/login.php"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># check dns</span></span><br><span class="line">cat /etc/resolv.conf</span><br></pre></td></tr></table></figure><h5 id="获取文件中的部分"><a href="#获取文件中的部分" class="headerlink" title="获取文件中的部分"></a>获取文件中的部分</h5><ul><li><p>获取user-item.lst文件的5-10行,复制到test文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'5,10p'</span> user-item.lst &gt; <span class="built_in">test</span></span><br></pre></td></tr></table></figure></li><li><p>获取user-item.lst文件的前100行,复制到test文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head -100 user-item.lst &gt; <span class="built_in">test</span></span><br></pre></td></tr></table></figure></li><li><p>获取user-item.lst文件的后100行,复制到test文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -20 user-item.lst &gt; <span class="built_in">test</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="Configuring-remote-access-with-systemd-unit-file"><a href="#Configuring-remote-access-with-systemd-unit-file" class="headerlink" title="Configuring remote access with systemd unit file"></a>Configuring remote access with systemd unit file</h5><ol><li><p>open an override file for docker.service in a text editor.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl edit docker.service</span><br></pre></td></tr></table></figure></li><li><p>Add or modify the following lines, substituting your own values.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Service]</span><br><span class="line">ExecStart=</span><br><span class="line">ExecStart=/usr/bin/dockerd -H fd:// -H tcp://127.0.0.1:2375</span><br></pre></td></tr></table></figure></li><li><p>Save the file.</p></li><li><p>Reload the systemctl configuration.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure></li><li><p>Restart Docker.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl restart docker.service</span><br></pre></td></tr></table></figure></li></ol><h5 id="systemd-设置开机自动启动"><a href="#systemd-设置开机自动启动" class="headerlink" title="systemd 设置开机自动启动"></a>systemd 设置开机自动启动</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line">sudo systemctl <span class="built_in">disable</span> docker</span><br></pre></td></tr></table></figure><h5 id="watch间隔1秒刷新"><a href="#watch间隔1秒刷新" class="headerlink" title="watch间隔1秒刷新"></a>watch间隔1秒刷新</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">watch -n 1 -d nvidia-smi</span><br><span class="line">watch -n 1 -d <span class="string">'ps aux | grep mysql'</span></span><br></pre></td></tr></table></figure><h5 id="添加和删除变量"><a href="#添加和删除变量" class="headerlink" title="添加和删除变量"></a>添加和删除变量</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加http代理</span></span><br><span class="line"><span class="built_in">export</span> http_proxy=127.0.0.1:1080</span><br><span class="line"><span class="comment"># 删除http代理</span></span><br><span class="line"><span class="built_in">unset</span> http_proxy</span><br></pre></td></tr></table></figure><h5 id="更换编译器"><a href="#更换编译器" class="headerlink" title="更换编译器"></a>更换编译器</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc-6 g++-6</span><br><span class="line">sudo ln -s /usr/bin/gcc-6 /usr/<span class="built_in">local</span>/bin/gcc</span><br><span class="line">sudo ln -s /usr/bin/g++-6 /usr/<span class="built_in">local</span>/bin/g++</span><br></pre></td></tr></table></figure><h5 id="查看和杀死被锁进程"><a href="#查看和杀死被锁进程" class="headerlink" title="查看和杀死被锁进程"></a>查看和杀死被锁进程</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo lsof /var/lib/dpkg/lock-frontend</span><br><span class="line">sudo <span class="built_in">kill</span> -9 10963</span><br></pre></td></tr></table></figure><h5 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h5 id="查看端口"><a href="#查看端口" class="headerlink" title="查看端口"></a>查看端口</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netstat -npltu | grep 21</span><br></pre></td></tr></table></figure><h5 id="解压zip"><a href="#解压zip" class="headerlink" title="解压zip"></a>解压zip</h5><ul><li>-O    以指定的字符集显示和解压文件</li><li>-d    到指定的目录<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip -O CP936 day01.zip -d ./day01/</span><br></pre></td></tr></table></figure></li></ul><h5 id="解压rar"><a href="#解压rar" class="headerlink" title="解压rar"></a>解压rar</h5><ul><li>x     解压<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unrar x day01.rar</span><br></pre></td></tr></table></figure></li></ul><h5 id="查看应用的进程树"><a href="#查看应用的进程树" class="headerlink" title="查看应用的进程树"></a>查看应用的进程树</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pstree -ap|grep gunicorn</span><br></pre></td></tr></table></figure><h5 id="设置快捷方式"><a href="#设置快捷方式" class="headerlink" title="设置快捷方式"></a>设置快捷方式</h5><blockquote><p>可以理解为从 sites-available/ 目录下发送了一个配置文件的快捷方式到 sites-enabled/ 目录。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /etc/nginx/sites-available/demo.zmrenwu.com /etc/nginx/sites-enabled/demo.zmrenwu.com</span><br></pre></td></tr></table></figure><h5 id="开启gunicom"><a href="#开启gunicom" class="headerlink" title="开启gunicom"></a>开启gunicom</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunicorn --<span class="built_in">bind</span> unix:/tmp/myweb.socket VItest.wsgi:application</span><br></pre></td></tr></table></figure><h5 id="Git-的操作"><a href="#Git-的操作" class="headerlink" title="Git 的操作"></a>Git 的操作</h5><blockquote><p>重置想要上传到github的文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD &lt;file&gt;</span><br></pre></td></tr></table></figure><blockquote><p>获取当前git项目的状态</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><blockquote><p>添加所有的未添加的文件到github上</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add -A</span><br></pre></td></tr></table></figure><blockquote><p>commit, 并添加本次commit的说明</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">"备注说明"</span></span><br></pre></td></tr></table></figure><blockquote><p>上传到原始的master分支</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><blockquote><p>创建一个叫做”feature_x”的分支，并切换过去：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b feature_x</span><br></pre></td></tr></table></figure><blockquote><p>切换回主分支：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure><blockquote><p>把新建的分支删掉：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d feature_x</span><br></pre></td></tr></table></figure><blockquote><p>要更新你的本地仓库至最新改动:</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><blockquote><p>要合并其他分支到你的当前分支（例如 master）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;branch&gt;</span><br></pre></td></tr></table></figure><blockquote><p>在合并改动之前，你可以使用如下命令预览差异</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;source_branch&gt; &lt;target_branch&gt;</span><br></pre></td></tr></table></figure><h5 id="删除软件-如-ngin"><a href="#删除软件-如-ngin" class="headerlink" title="删除软件(如:ngin)"></a>删除软件(如:ngin)</h5><ul><li>–purge    包括配置文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get --purge remove nginx</span><br></pre></td></tr></table></figure></li></ul><h5 id="罗列出相关的软件-比如-与nginx相关的软件"><a href="#罗列出相关的软件-比如-与nginx相关的软件" class="headerlink" title="罗列出相关的软件(比如:与nginx相关的软件)"></a>罗列出相关的软件(比如:与nginx相关的软件)</h5><ul><li>–purge    包括配置文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg --get-selections|grep nginx</span><br></pre></td></tr></table></figure></li></ul><h5 id="kill-比如-nginx进程"><a href="#kill-比如-nginx进程" class="headerlink" title="kill (比如:nginx进程)"></a>kill (比如:nginx进程)</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">kill</span>  -9  7875 7876 7877 7879</span><br></pre></td></tr></table></figure><h5 id="全局查找-比如-nginx相关的文件"><a href="#全局查找-比如-nginx相关的文件" class="headerlink" title="全局查找(比如:nginx相关的文件)"></a>全局查找(比如:nginx相关的文件)</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo  find  /  -name  nginx*</span><br></pre></td></tr></table></figure><h5 id="将-alias-lg-’lazygit’-写入-zshrc中-可以通过使用lg代替lazygit"><a href="#将-alias-lg-’lazygit’-写入-zshrc中-可以通过使用lg代替lazygit" class="headerlink" title="将 alias lg =’lazygit’ 写入.zshrc中,可以通过使用lg代替lazygit"></a>将 alias lg =’lazygit’ 写入.zshrc中,可以通过使用lg代替lazygit</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> “<span class="built_in">alias</span> lg =<span class="string">'lazygit'</span>”&gt;&gt;〜/.zshrc</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 系统命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 系统命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>conda命令的使用</title>
      <link href="/2018/05/06/conda%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/05/06/conda%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="Conda常用命令整理"><a href="#Conda常用命令整理" class="headerlink" title="Conda常用命令整理"></a>Conda常用命令整理</h3><h5 id="0-获取版本号"><a href="#0-获取版本号" class="headerlink" title="0.获取版本号"></a>0.获取版本号</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda --version</span><br><span class="line">conda -V</span><br></pre></td></tr></table></figure><h5 id="1-获取帮助"><a href="#1-获取帮助" class="headerlink" title="1. 获取帮助"></a>1. 获取帮助</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda --help</span><br><span class="line">conda -h</span><br></pre></td></tr></table></figure><ul><li>查看某一命令的帮助，如update命令及remove命令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda update --help</span><br><span class="line">conda remove --help</span><br></pre></td></tr></table></figure><blockquote><p>同理，以上命令中的–help也可以换成-h。</p></blockquote><h5 id="2-环境管理"><a href="#2-环境管理" class="headerlink" title="2.环境管理"></a>2.环境管理</h5><ul><li>查看环境管理的全部命令帮助</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env -h</span><br></pre></td></tr></table></figure><ul><li>创建环境</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create --name your_env_name</span><br></pre></td></tr></table></figure><p>输入y确认创建。</p><ul><li>创建制定python版本的环境</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda create --name your_env_name python=2.7</span><br><span class="line">conda create --name your_env_name python=3</span><br><span class="line">conda create --name your_env_name python=3.5</span><br></pre></td></tr></table></figure><ul><li>创建包含某些包的环境</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create --name your_env_name numpy scipy</span><br></pre></td></tr></table></figure><ul><li>创建指定python版本下包含某些包的环境</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create --name your_env_name python=3.6 numpy scipy</span><br></pre></td></tr></table></figure><ul><li>列举当前所有环境</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda info --envs</span><br><span class="line">conda env list</span><br></pre></td></tr></table></figure><ul><li>进入某个环境</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">activate your_env_name</span><br></pre></td></tr></table></figure><ul><li>退出当前环境</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source deactivate</span><br></pre></td></tr></table></figure><ul><li>复制某个环境</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create --name new_env_name --clone old_env_name</span><br></pre></td></tr></table></figure><ul><li>删除某个环境</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove --name your_env_name --all</span><br></pre></td></tr></table></figure><h5 id="3-分享环境"><a href="#3-分享环境" class="headerlink" title="3.分享环境"></a>3.分享环境</h5><p>如果你想把你当前的环境配置与别人分享，这样ta可以快速建立一个与你一模一样的环境（同一个版本的<code>python</code>及各种包）来共同开发/进行新的实验。一个分享环境的快速方法就是给ta一个你的环境的<code>.yml</code>文件。</p><p>首先通过<code>activate target_env</code>要分享的环境<code>target_env</code>，然后输入下面的命令会在当前工作目录下生成一个<code>environment.yml</code>文件，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env export &gt; environment.yml</span><br></pre></td></tr></table></figure><p>小伙伴拿到<code>environment.yml</code>文件后，将该文件放在工作目录下，可以通过以下命令从该文件创建环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env create -f environment.yml</span><br></pre></td></tr></table></figure><p>当然，你也可以手写一个<code>.yml</code>文件用来描述或记录你的<code>python</code>环境。</p><h5 id="4-包管理"><a href="#4-包管理" class="headerlink" title="4.包管理"></a>4.包管理</h5><ul><li>列举当前活跃环境下的所有包</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda list</span><br></pre></td></tr></table></figure><ul><li>列举一个非当前活跃环境下的所有包</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda list -n your_env_name</span><br></pre></td></tr></table></figure><ul><li>为指定环境安装某个包</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -n env_name package_name</span><br></pre></td></tr></table></figure><blockquote><p>如果不能通过<code>conda install</code>来安装，文档中提到可以从<code>Anaconda.org</code>安装，但我觉得会更习惯用<code>pip</code>直接安装。<code>pip</code>在<code>Anaconda</code>中已安装好，不需要单独为每个环境安装<code>pip</code>。如需要用<code>pip</code>管理包，<code>activate</code>环境后直接使用即可。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OSX相关命令</title>
      <link href="/2018/04/08/OSX%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/04/08/OSX%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>这里的命令只用于OSX(苹果系统)</p></blockquote><h3 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h3><h4 id="Homebrew安装"><a href="#Homebrew安装" class="headerlink" title="Homebrew安装"></a>Homebrew安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure><h4 id="Homebrew卸载"><a href="#Homebrew卸载" class="headerlink" title="Homebrew卸载"></a>Homebrew卸载</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)</span>"</span></span><br></pre></td></tr></table></figure><h4 id="Homebrew常用命令列表"><a href="#Homebrew常用命令列表" class="headerlink" title="Homebrew常用命令列表"></a>Homebrew常用命令列表</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">brew <span class="built_in">help</span> <span class="comment">#查看所有命令</span></span><br><span class="line">brew search mysql <span class="comment">#搜索</span></span><br><span class="line">brew install mysql <span class="comment">#安装软件</span></span><br><span class="line">brew uninstall mysql <span class="comment">#卸载软件</span></span><br><span class="line">brew list <span class="comment">#显示已经安装软件列表</span></span><br><span class="line">brew services list <span class="comment">#显示安装的服务</span></span><br><span class="line">brew info mysql <span class="comment">#查看信息，比如目前的版本，依赖，安装后注意事项等</span></span><br></pre></td></tr></table></figure><h4 id="Homebrew一般命令列表"><a href="#Homebrew一般命令列表" class="headerlink" title="Homebrew一般命令列表"></a>Homebrew一般命令列表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">brew services start mysql #启动</span><br><span class="line">brew services stop mysql #停止)</span><br><span class="line">brew services restart mysql #重启)</span><br><span class="line">brew update #更新 Homebrew</span><br><span class="line">brew outdated #列出所有安装的软件里可以升级的那些</span><br><span class="line">brew upgrade #更新所有的包</span><br><span class="line">brew upgrade $mysql #更新指定的包</span><br><span class="line">brew cleanup # 清理所有包的旧版本</span><br><span class="line">brew cleanup $mysql #清理指定包的旧版本</span><br><span class="line">brew cleanup -n #查看可清理的旧版本包，不执行实际操作</span><br><span class="line">which brew #查看 brew 命令的路径</span><br><span class="line">brew home mysql #用浏览器打开官方主页</span><br></pre></td></tr></table></figure><h4 id="Homebrew锁定不想更新的包"><a href="#Homebrew锁定不想更新的包" class="headerlink" title="Homebrew锁定不想更新的包"></a>Homebrew锁定不想更新的包</h4><p>如果经常更新的话，brew update 一次更新所有的包是非常方便的。但我们有时候会担心自动升级把一些不希望更新的包更新了。数据库就属于这一类，尤其是 PostgreSQL 跨 minor 版本升级都要迁移数据库的。我们更希望找个时间单独处理它。这时可用 brew pin 去锁定这个包，然后 brew update 就会略过它了，用到的命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">brew pin $FORMULA #锁定某个包</span><br><span class="line">brew unpin $FORMULA # 取消锁定</span><br><span class="line">brew deps #查看包的依赖关系，常用它来查看已安装的包的依赖，然后判断哪些包是可以安全删除的。</span><br><span class="line">brew deps --installed --tree #查看已安装的包的依赖，树形显示</span><br></pre></td></tr></table></figure><h4 id="Homebrew-扩展推荐-brew-cask"><a href="#Homebrew-扩展推荐-brew-cask" class="headerlink" title="Homebrew 扩展推荐(brew cask)"></a>Homebrew 扩展推荐(brew cask)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">brew cask search    # 列出所有可以被安装的软件</span><br><span class="line">brew cask search name   # 查找所有和 name相关的应用</span><br><span class="line">brew cask install name  # 下载安装软件</span><br><span class="line">brew cask uninstall name    # 卸载软件</span><br><span class="line">brew cask info app  # 列出应用的信息</span><br><span class="line">brew cask list  # 列出本机安装过的软件列表</span><br><span class="line">brew cask cleanup   # 清除下载的缓存以及各种链接信息</span><br><span class="line">brew cask uninstall name &amp;&amp; brew cask install name    ＃更新程序 （目前homebrew-cask 并没有命令直接更新已安装的软件，软件更新主要是通过软件自身的完成更新）</span><br></pre></td></tr></table></figure><h4 id="Homebrew-扩展推荐-brew-cask-upgrade"><a href="#Homebrew-扩展推荐-brew-cask-upgrade" class="headerlink" title="Homebrew 扩展推荐(brew-cask-upgrade)"></a>Homebrew 扩展推荐(<a href="https://github.com/buo/homebrew-cask-upgrade" target="_blank" rel="noopener">brew-cask-upgrade</a>)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cu #更新brew cask</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>curl命令的使用</title>
      <link href="/2018/04/05/curl%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/04/05/curl%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl(选项)(参数)</span><br></pre></td></tr></table></figure><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><h6 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h6><blockquote><p>curl命令可以用来执行下载、发送各种HTTP请求，指定HTTP头部等操作。如果系统没有curl可以使用yum install curl安装，也可以下载安装。curl是将下载文件输出到stdout，将进度信息输出到stderr，不显示进度信息使用–silent选项。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl URL --silent</span><br></pre></td></tr></table></figure><blockquote><p>这条命令是将下载文件输出到终端，所有下载的数据都被写入到stdout。<br>使用选项-O将下载的数据写入到文件，必须使用文件的绝对地址：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://man.linuxde.net/text.iso --silent -O</span><br></pre></td></tr></table></figure><blockquote><p>选项-o将下载数据写入到指定名称的文件中，并使用–progress显示进度条：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl http://man.linuxde.net/test.iso -o filename.iso --progress</span><br><span class="line">######################################### 100.0%</span><br></pre></td></tr></table></figure><h6 id="断点续传"><a href="#断点续传" class="headerlink" title="断点续传"></a>断点续传</h6><blockquote><p>curl能够从特定的文件偏移处继续下载，它可以通过指定一个便宜量来下载部分文件：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl URL/File -C 偏移量</span><br><span class="line"></span><br><span class="line">#偏移量是以字节为单位的整数，如果让curl自动推断出正确的续传位置使用-C -：</span><br><span class="line">curl -C -URL</span><br></pre></td></tr></table></figure><h6 id="使用curl设置参照页字符串"><a href="#使用curl设置参照页字符串" class="headerlink" title="使用curl设置参照页字符串"></a>使用curl设置参照页字符串</h6><blockquote><p>参照页是位于HTTP头部中的一个字符串，用来表示用户是从哪个页面到达当前页面的，如果用户点击网页A中的某个连接，那么用户就会跳转到B网页，网页B头部的参照页字符串就包含网页A的URL。</p></blockquote><blockquote><p>使用–referer选项指定参照页字符串：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --referer http://www.google.com http://man.linuxde.net</span><br></pre></td></tr></table></figure><h6 id="用curl设置cookies"><a href="#用curl设置cookies" class="headerlink" title="用curl设置cookies"></a>用curl设置cookies</h6><blockquote><p>使用–cookie “COKKIES”选项来指定cookie，多个cookie使用分号分隔：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://man.linuxde.net --cookie &quot;user=root;pass=123456&quot;</span><br></pre></td></tr></table></figure><blockquote><p>将cookie另存为一个文件，使用–cookie-jar选项：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl URL --cookie-jar cookie_file</span><br></pre></td></tr></table></figure><h6 id="用curl设置用户代理字符串"><a href="#用curl设置用户代理字符串" class="headerlink" title="用curl设置用户代理字符串"></a>用curl设置用户代理字符串</h6><blockquote><p>有些网站访问会提示只能使用IE浏览器来访问，这是因为这些网站设置了检查用户代理，可以使用curl把用户代理设置为IE，这样就可以访问了。使用–user-agent或者-A选项：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl URL --user-agent &quot;Mozilla/5.0&quot;</span><br><span class="line">curl URL -A &quot;Mozilla/5.0&quot;</span><br></pre></td></tr></table></figure><blockquote><p>其他HTTP头部信息也可以使用curl来发送，使用-H”头部信息” 传递多个头部信息，例如：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -H &quot;Host:man.linuxde.net&quot; -H &quot;accept-language:zh-cn&quot; URL</span><br></pre></td></tr></table></figure><h6 id="curl的带宽控制和下载配额"><a href="#curl的带宽控制和下载配额" class="headerlink" title="curl的带宽控制和下载配额"></a>curl的带宽控制和下载配额</h6><blockquote><p>使用–limit-rate限制curl的下载速度：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl URL --limit-rate 50k</span><br></pre></td></tr></table></figure><blockquote><p>命令中用k（千字节）和m（兆字节）指定下载速度限制。</p></blockquote><blockquote><p>使用–max-filesize指定可下载的最大文件大小：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl URL --max-filesize bytes</span><br></pre></td></tr></table></figure><blockquote><p>如果文件大小超出限制，命令则返回一个非0退出码，如果命令正常则返回0。</p></blockquote><h6 id="用curl进行认证"><a href="#用curl进行认证" class="headerlink" title="用curl进行认证"></a>用curl进行认证</h6><blockquote><p>使用curl选项 -u 可以完成HTTP或者FTP的认证，可以指定密码，也可以不指定密码在后续操作中输入密码：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -u user:pwd http://man.linuxde.net</span><br><span class="line">curl -u user http://man.linuxde.net</span><br></pre></td></tr></table></figure><blockquote><p>只打印响应头部信息</p></blockquote><blockquote><p>通过-I或者-head可以只打印出HTTP头部信息：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost text]# curl -I http://man.linuxde.net</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.2.5</span><br><span class="line">date: Mon, 10 Dec 2012 09:24:34 GMT</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">X-Pingback: http://man.linuxde.net/xmlrpc.php</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 系统命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 系统命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言内存分配</title>
      <link href="/2018/03/04/c%E8%AF%AD%E8%A8%80%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/"/>
      <url>/2018/03/04/c%E8%AF%AD%E8%A8%80%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h5 id="malloc-函数"><a href="#malloc-函数" class="headerlink" title="malloc 函数"></a>malloc 函数</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typename</span>* p = (<span class="keyword">typename</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">typename</span>))</span><br><span class="line"><span class="comment">// 释放内存</span></span><br><span class="line"><span class="built_in">free</span>(p)</span><br></pre></td></tr></table></figure><h6 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h6><blockquote><p>申请内存空间大小(即sizeof(typename))为malloc的参数,malloc会分配一个大小为sizeof(typename)的空间,并返回一个指针指向这个空间,这个指针的类为未确定类型(void<em>),所以要使用(typename</em>)强制转换.</p></blockquote><h5 id="new-函数"><a href="#new-函数" class="headerlink" title="new 函数"></a>new 函数</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typename</span>* p = <span class="keyword">new</span> <span class="keyword">typename</span>;</span><br><span class="line"><span class="comment">// 释放内存</span></span><br><span class="line"><span class="keyword">delete</span>(p)</span><br></pre></td></tr></table></figure><h6 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h6><blockquote><p>C++中用于申请动态空间.并返回对应类型的指针</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言小笔记</title>
      <link href="/2018/03/04/c%E8%AF%AD%E8%A8%80%E5%B0%8F%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/03/04/c%E8%AF%AD%E8%A8%80%E5%B0%8F%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h5 id="sizeof"><a href="#sizeof" class="headerlink" title="sizeof"></a>sizeof</h5><ul><li>用于计算一个变量或一个常量所占的字节数<blockquote><p>注意:sizeof是一运算符</p></blockquote></li></ul><h5 id="getchar"><a href="#getchar" class="headerlink" title="getchar"></a>getchar</h5><ul><li>专门的取字符函数,取一个字符</li></ul><h5 id="关于函数"><a href="#关于函数" class="headerlink" title="关于函数"></a>关于函数</h5><ul><li>是需要在使用前申明,写在main函数中也可以.</li><li>且默认返回值是int<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br></pre></td></tr></table></figure></li></ul><h5 id="include后面的-lt-gt-和””区别"><a href="#include后面的-lt-gt-和””区别" class="headerlink" title="include后面的&lt;&gt;和””区别"></a>include后面的&lt;&gt;和””区别</h5><ul><li>如果使用&lt;&gt;表示先从开发工具的编译环境中去查找，然后再去系统的编译环境中去找</li><li>如果使用””表示现在当前文件夹下面去找，再从开发工具的编译环境中去查找，然后再去系统的编译环境中去找</li></ul><h5 id="h文件不参与编译"><a href="#h文件不参与编译" class="headerlink" title=".h文件不参与编译"></a>.h文件不参与编译</h5><h5 id="进制表示"><a href="#进制表示" class="headerlink" title="进制表示"></a>进制表示</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num2 = <span class="number">0b1100</span>;  <span class="comment">//表示2进制</span></span><br><span class="line"><span class="keyword">int</span> num8 = <span class="number">014</span>;     <span class="comment">//表示8进制</span></span><br><span class="line"><span class="keyword">int</span> num16 = <span class="number">0x12</span>;   <span class="comment">//表示16进制</span></span><br></pre></td></tr></table></figure><h5 id="进制输出"><a href="#进制输出" class="headerlink" title="进制输出"></a>进制输出</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(%o\n,num8);  <span class="comment">//表示8进制</span></span><br><span class="line"><span class="built_in">printf</span>(%x\n,num16); <span class="comment">//表示16进制</span></span><br></pre></td></tr></table></figure><h5 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h5><ul><li>数据以二进制的形式存在内存中</li><li>二进制分为：原码/反码/补码</li><li>最终存储在内存中的是补码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 9 </span><br><span class="line">// 原码/反码/补码</span><br><span class="line">0000 0000 0000 0000 0000 0000 0000 1001</span><br><span class="line"></span><br><span class="line">// -9</span><br><span class="line">//原码  第一位为符号位</span><br><span class="line">1000 0000 0000 0000 0000 0000 0000 1001</span><br><span class="line">//反码  符号位不变，其他取反</span><br><span class="line">1111 1111 1111 1111 1111 1111 1111 0110</span><br><span class="line">//补码  反码加1</span><br><span class="line">1111 1111 1111 1111 1111 1111 1111 0111</span><br></pre></td></tr></table></figure></li></ul><h5 id="c语言规定字符串是由-0结尾"><a href="#c语言规定字符串是由-0结尾" class="headerlink" title="c语言规定字符串是由\0结尾"></a>c语言规定字符串是由\0结尾</h5><h5 id="结构体占用内存"><a href="#结构体占用内存" class="headerlink" title="结构体占用内存"></a>结构体占用内存</h5><ul><li>结构体占用内存是一定是最大占用属性的倍数</li><li>而且如果剩余内存不够，将从新分配最大占用属性大小的空间</li></ul>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基本模块</title>
      <link href="/2018/03/01/python%E5%9F%BA%E6%9C%AC%E6%A8%A1%E5%9D%97/"/>
      <url>/2018/03/01/python%E5%9F%BA%E6%9C%AC%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h5 id="Enumerate"><a href="#Enumerate" class="headerlink" title="Enumerate()"></a>Enumerate()</h5><blockquote><p>很多时候，在处理迭代器时，我们还需要保持迭代次数。 Python通过为此任务提供内置函数enumerate（）来简化程序员的任务。</p></blockquote><h6 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax:"></a>Syntax:</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enumerate(iterable, start=0)</span><br><span class="line"></span><br><span class="line">Parameters:</span><br><span class="line">Iterable: any object that supports iteration</span><br><span class="line">Start: the index value from which the counter is </span><br><span class="line">              to be started, by default it is 0</span><br></pre></td></tr></table></figure><h6 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python program to illustrate </span></span><br><span class="line"><span class="comment"># enumerate function in loops </span></span><br><span class="line">l1 = [<span class="string">"eat"</span>,<span class="string">"sleep"</span>,<span class="string">"repeat"</span>] </span><br><span class="line">  </span><br><span class="line"><span class="comment"># printing the tuples in object directly </span></span><br><span class="line"><span class="keyword">for</span> ele <span class="keyword">in</span> enumerate(l1): </span><br><span class="line">    <span class="keyword">print</span> ele </span><br><span class="line"><span class="keyword">print</span> </span><br><span class="line"><span class="comment"># changing index and printing separately </span></span><br><span class="line"><span class="keyword">for</span> count,ele <span class="keyword">in</span> enumerate(l1,<span class="number">100</span>): </span><br><span class="line">    <span class="keyword">print</span> count,ele</span><br></pre></td></tr></table></figure><h6 id="Output"><a href="#Output" class="headerlink" title="Output:"></a>Output:</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">0</span>, <span class="string">'eat'</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="string">'sleep'</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="string">'repeat'</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">100</span> eat</span><br><span class="line"><span class="number">101</span> sleep</span><br><span class="line"><span class="number">102</span> repeat</span><br></pre></td></tr></table></figure><h5 id="getattr"><a href="#getattr" class="headerlink" title="getattr()"></a>getattr()</h5><blockquote><p>getattr() 函数用于返回一个对象属性值。</p></blockquote><h6 id="Syntax-1"><a href="#Syntax-1" class="headerlink" title="Syntax:"></a>Syntax:</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">getattr(object, name[, default])</span><br><span class="line"></span><br><span class="line">Parameters:</span><br><span class="line">object -- 对象。</span><br><span class="line">name -- 字符串，对象属性。</span><br><span class="line">default -- 默认返回值，如果不提供该参数，在没有对应属性时，将触发 AttributeError。</span><br></pre></td></tr></table></figure><h6 id="Code-1"><a href="#Code-1" class="headerlink" title="Code:"></a>Code:</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">... </span>    bar = <span class="number">1</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = A()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(a, <span class="string">'bar'</span>)        <span class="comment"># 获取属性 bar 值</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(a, <span class="string">'bar2'</span>)       <span class="comment"># 属性 bar2 不存在，触发异常</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">'A'</span> object has no attribute <span class="string">'bar2'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(a, <span class="string">'bar2'</span>, <span class="number">3</span>)    <span class="comment"># 属性 bar2 不存在，但设置了默认值</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h5 id="zip"><a href="#zip" class="headerlink" title="zip()"></a>zip()</h5><blockquote><p>zip() 函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的列表。</p><p>如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同，利用 * 号操作符，可以将元组解压为列表。</p><p>zip 方法在 Python 2 和 Python 3 中的不同：在 Python 3.x 中为了减少内存，zip() 返回的是一个对象。如需展示列表，需手动 list() 转换。</p></blockquote><h6 id="Syntax-2"><a href="#Syntax-2" class="headerlink" title="Syntax:"></a>Syntax:</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zip([iterable, ...])</span><br><span class="line"></span><br><span class="line">Parameters:</span><br><span class="line">iterabl -- 一个或多个迭代器;</span><br></pre></td></tr></table></figure><h6 id="Code-2"><a href="#Code-2" class="headerlink" title="Code:"></a>Code:</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>zipped = zip(a,b)     <span class="comment"># 打包为元组的列表</span></span><br><span class="line">[(<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">6</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>zip(a,c)              <span class="comment"># 元素个数与最短的列表一致</span></span><br><span class="line">[(<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">6</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>zip(*zipped)          <span class="comment"># 与 zip 相反，*zipped 可理解为解压，返回二维矩阵式</span></span><br><span class="line">[(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)]</span><br></pre></td></tr></table></figure><h5 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h5><blockquote><p>filter() 函数用于过滤序列，过滤掉不符合条件的元素，返回由符合条件元素组成的新列表。</p><p>该接收两个参数，第一个为函数，第二个为序列，序列的每个元素作为参数传递给函数进行判，然后返回 True 或 False，最后将返回 True 的元素放到新列表中。</p><p>注意: Pyhton2.7 返回列表，Python3.x 返回迭代器对象，</p></blockquote><h6 id="Syntax-3"><a href="#Syntax-3" class="headerlink" title="Syntax:"></a>Syntax:</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">filter(function, iterable)</span><br><span class="line"></span><br><span class="line">Parameters:</span><br><span class="line">function -- 判断函数。</span><br><span class="line">iterable -- 可迭代对象。</span><br></pre></td></tr></table></figure><h6 id="Code-3"><a href="#Code-3" class="headerlink" title="Code:"></a>Code:</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment"># 过滤出1~100中平方根是整数的数： </span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_sqr</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> math.sqrt(x) % <span class="number">1</span> == <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">newlist = filter(is_sqr, range(<span class="number">1</span>, <span class="number">101</span>))</span><br><span class="line">print(newlist)</span><br></pre></td></tr></table></figure><h6 id="Output-1"><a href="#Output-1" class="headerlink" title="Output:"></a>Output:</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux用户权限</title>
      <link href="/2018/02/06/Linux%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90/"/>
      <url>/2018/02/06/Linux%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><h5 id="useradd"><a href="#useradd" class="headerlink" title="useradd"></a>useradd</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useradd -r -m -s /bin/bash vallzey</span><br><span class="line">passwd spark</span><br><span class="line">chmod +w /etc/sudoers</span><br></pre></td></tr></table></figure><h5 id="查看目录或文件权限"><a href="#查看目录或文件权限" class="headerlink" title="查看目录或文件权限"></a>查看目录或文件权限</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getfacl 目录或文件</span><br></pre></td></tr></table></figure><h5 id="设置目录或文件权限"><a href="#设置目录或文件权限" class="headerlink" title="设置目录或文件权限"></a>设置目录或文件权限</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo setfacl -m user:vallzey:rwx <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h5 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h5><blockquote><p>利用 chown命令 可以将文件的拥有者加以改变。</p></blockquote><ul><li>-R处理指定目录以及其子目录下的所有文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chown &quot;$USER&quot;:&quot;$USER&quot; /home/&quot;$USER&quot;/.docker -R</span><br><span class="line">sudo chmod g+rwx &quot;$HOME/.docker&quot; -R</span><br></pre></td></tr></table></figure><h5 id="创建一个用户组"><a href="#创建一个用户组" class="headerlink" title="创建一个用户组"></a>创建一个用户组</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd docker</span><br></pre></td></tr></table></figure><h5 id="添加一个用户在到存在的用户组中"><a href="#添加一个用户在到存在的用户组中" class="headerlink" title="添加一个用户在到存在的用户组中"></a>添加一个用户在到存在的用户组中</h5><blockquote><p>生效需要注销重新登录</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 系统命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 系统命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>管理github的star项目</title>
      <link href="/2018/02/04/%E7%AE%A1%E7%90%86github%E7%9A%84star%E9%A1%B9%E7%9B%AE/"/>
      <url>/2018/02/04/%E7%AE%A1%E7%90%86github%E7%9A%84star%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Github-management"><a href="#Github-management" class="headerlink" title="Github management"></a>Github management</h1><hr><h2 id="不想工作"><a href="#不想工作" class="headerlink" title="不想工作"></a>不想工作</h2><ul><li><p>[<a href="https://github.com/PPshrimpGo/AIinterview" target="_blank" rel="noopener">AIinterview</a>]</p><blockquote><p>算法工程师面试题整理</p></blockquote></li><li><p>[<a href="https://github.com/monklof/Back-End-Developer-Interview-Questions" target="_blank" rel="noopener">Back-End-Developer-Interview-Questions</a>]</p><blockquote><p>后端开发面试题。</p></blockquote></li><li><p>[<a href="https://github.com/xingshaocheng/architect-awesome" target="_blank" rel="noopener">architect-awesome</a>]</p><blockquote><p>后端架构师技术图谱</p></blockquote></li><li><p>[<a href="https://github.com/crossoverJie/JCSprout" target="_blank" rel="noopener">JCSprout</a>]</p><blockquote><p>处于萌芽阶段的 Java 核心知识库。</p></blockquote></li><li><p>[<a href="https://github.com/Blankj/awesome-java-leetcode" target="_blank" rel="noopener">awesome-java-leetcode</a>]</p><blockquote><p>用Java解决方案的LeetCode算法（更新）。</p></blockquote></li><li><p>[<a href="https://github.com/crossoverJie/SSM" target="_blank" rel="noopener">SSM</a>]</p><blockquote><p>从0开始分布式微服务构建SSM。</p></blockquote></li><li><p>[<a href="https://github.com/CL0610/Java-concurrency" target="_blank" rel="noopener">Java-concurrency</a>]</p><blockquote><p>Java并发知识点总结</p></blockquote></li><li><p>[<a href="https://github.com/CyC2018/CS-Notes" target="_blank" rel="noopener">CS-Notes</a>]</p><blockquote><p>技术面试必备基础知识、Leetcode 题解、后端面试、Java 面试、春招、秋招、操作系统、计算机网络、系统设计</p></blockquote></li><li><p>[<a href="https://github.com/imhuay/Algorithm_Interview_Notes-Chinese" target="_blank" rel="noopener">Algorithm_Interview_Notes-Chinese</a>]</p><blockquote><p>2018/2019/校招/春招/秋招/算法/机器学习(Machine Learning)/深度学习(Deep Learning)/自然语言处理(NLP)/C/C++/Python/面试笔记</p></blockquote></li></ul><hr><h2 id="没事别学习"><a href="#没事别学习" class="headerlink" title="没事别学习"></a>没事别学习</h2><ul><li><p>[<a href="https://github.com/jaungiers/LSTM-Neural-Network-for-Time-Series-Prediction" target="_blank" rel="noopener">LSTM-Neural-Network-for-Time-Series-Prediction</a>]</p><blockquote><p>LSTM使用Keras Python包构建，以预测时间序列步骤和序列。包括sin wave和股市数据。</p></blockquote></li><li><p>[<a href="https://github.com/yeasy/docker_practice" target="_blank" rel="noopener">docker_practice</a>]</p><blockquote><p>Docker — 从入门到实践</p></blockquote></li><li><p>[<a href="https://github.com/taki0112/Tensorflow-Cookbook" target="_blank" rel="noopener">Tensorflow-Cookbook</a>]</p><blockquote><p>简单的Tensorflow Cookbook易于使用教程</p></blockquote></li><li><p>[<a href="https://github.com/kmario23/deep-learning-drizzle" target="_blank" rel="noopener">deep-learning-drizzle</a>]</p><blockquote><p>通过学习这些激动人心的讲座，深入学习深度学习，强化学习，机器学习，计算机视觉和NLP！</p></blockquote></li><li><p>[<a href="https://github.com/24OI/OI-wiki" target="_blank" rel="noopener">OI-wiki</a>]</p><blockquote><p>OI Wiki 致力于成为一个免费开放且持续更新的知识整合站点，大家可以在这里获取关于 编程竞赛 (competitive programming) 有趣又实用的知识，我们为大家准备了竞赛中的基础知识、常见题型、解题思路以及常用工具等内容，帮助大家更快速深入地学习编程竞赛。</p></blockquote></li><li><p>[<a href="https://github.com/dyc87112/SpringBoot-Learning" target="_blank" rel="noopener">SpringBoot-Learning</a>]</p><blockquote><p>Spring Boot基础教程，Spring Boot 2.x版本连载中！！</p></blockquote></li><li><p>[<a href="https://github.com/tensorflow/models" target="_blank" rel="noopener">models</a>]</p><blockquote><p>使用TensorFlow构建的模型和示例</p></blockquote></li><li><p>[<a href="https://github.com/jikexueyuanwiki/tensorflow-zh" target="_blank" rel="noopener">tensorflow-zh</a>]</p><blockquote><p>谷歌全新开源人工智能系统TensorFlow官方文档中文版</p></blockquote></li><li><p>[<a href="https://github.com/cfenollosa/os-tutorial" target="_blank" rel="noopener">os-tutorial</a>]</p><blockquote><p>如何从头开始创建操作系统！</p></blockquote></li><li><p>[<a href="https://github.com/openai/finetune-transformer-lm" target="_blank" rel="noopener">finetune-transformer-lm</a>]</p><blockquote><p>Code and model for the paper “Improving Language Understanding by Generative Pre-Training”</p></blockquote></li><li><p>[<a href="https://github.com/xiaojunxu/SQLNet" target="_blank" rel="noopener">SQLNet</a>]</p><blockquote><p>用于从自然语言生成结构化查询的神经网络。</p></blockquote></li><li><p>[<a href="https://github.com/daicoolb/RecommenderSystem-Paper" target="_blank" rel="noopener">RecommenderSystem-Paper</a>]</p><blockquote><p>推荐系统中使用的论文，工具和框架。</p></blockquote></li><li><p>[<a href="https://github.com/google-research/bert" target="_blank" rel="noopener">bert</a>]</p><blockquote><p>TensorFlow代码和预先训练的BERT模型</p></blockquote></li><li><p>[<a href="https://github.com/adam-golab/react-developer-roadmap" target="_blank" rel="noopener">react-developer-roadmap</a>]</p><blockquote><p>成为2019年React开发人员的路线图</p></blockquote></li><li><p>[<a href="https://github.com/aaalgo/kgraph" target="_blank" rel="noopener">kgraph</a>]</p><blockquote><p>A library for k-nearest neighbor search</p></blockquote></li><li><p>[<a href="https://github.com/MorvanZhou/Tensorflow-Tutorial" target="_blank" rel="noopener">Tensorflow-Tutorial</a>]</p><blockquote><p>在这些教程中，我们将构建我们的第一个神经网络，并尝试构建一些近年来开发的高级神经网络架构。</p></blockquote></li><li><p>[<a href="https://github.com/pawl/awesome-etl" target="_blank" rel="noopener">awesome-etl</a>]</p><blockquote><p>精选的ETL（提取，转换，加载）框架，库和软件的精选列表。</p></blockquote></li></ul><hr><h2 id="无聊的项目"><a href="#无聊的项目" class="headerlink" title="无聊的项目"></a>无聊的项目</h2><ul><li><p>[<a href="https://github.com/NVlabs/SPADE" target="_blank" rel="noopener">SPADE</a>] </p><blockquote><p>英伟达（NVIDIA）新开源的绘图工具。利用生成对抗网络，根据几根简单的线条就能生成栩栩如生的图像。</p></blockquote><blockquote><p><img src="SPADE.gif" alt="SPADE"></p></blockquote></li><li><p>[<a href="https://github.com/binhnguyennus/awesome-scalability" target="_blank" rel="noopener">awesome-scalability</a>]</p><blockquote><p>一个系统的阅读列表，描述了可扩展、高可用、高性能的大型系统背后的东西。每部分都是基于真实案例，讲述了如何搭建一个可扩展、高可用、高性能的大型系统，案例都是来自于经过数百万甚至数十亿用户实战检验的系统。对于所有工程师而言都是一个很好的学习资料，开卷有益。</p></blockquote></li><li><p>[<a href="https://github.com/wsargent/docker-cheat-sheet" target="_blank" rel="noopener">docker-cheat-sheet</a>]</p><blockquote><p>关于Docker详细的备忘单。</p></blockquote></li><li><p>[<a href="https://github.com/netdata/netdata" target="_blank" rel="noopener">netdata</a>]</p><blockquote><p>Netdata是系统和应用程序的分布式，实时，性能和健康监控。它是您在所有系统和容器上安装的高度优化的监视代理程序。</p></blockquote></li><li><p>[<a href="https://github.com/zhaoolee/ChromeAppHeroes" target="_blank" rel="noopener">ChromeAppHeroes</a>]</p><blockquote><p>谷粒-Chrome插件英雄榜, 为优秀的Chrome插件写一本中文说明书, 让Chrome插件英雄们造福人类~</p></blockquote></li><li><p>[<a href="https://github.com/easychen/howto-make-more-money" target="_blank" rel="noopener">howto-make-more-money</a>]</p><blockquote><p>程序员如何优雅的挣零花钱？</p></blockquote></li><li><p>[<a href="https://github.com/CriseLYJ/awesome-python-login-model" target="_blank" rel="noopener">awesome-python-login-model</a>]</p><blockquote><p>python模拟登陆一些大型网站，还有一些简单的爬虫。</p></blockquote></li><li><p>[<a href="https://github.com/ryanoasis/nerd-fonts" target="_blank" rel="noopener">nerd-fonts</a>]</p><blockquote><p>标志性的字体聚合器，集合和修补程序。 40多个修补字体，超过3,600个字形/图标，包括流行的集合，如Font Awesome和Hack等字体</p></blockquote></li><li><p>[<a href="https://github.com/h5bp/html5-boilerplate" target="_blank" rel="noopener">html5-boilerplate</a>]</p><blockquote><p>HTML5 Boilerplate是一个专业的前端模板，用于构建快速，健壮且适应性强的Web应用程序或站点。 该项目是多年迭代开发和社区知识的产物。它没有强加特定的开发理念或框架，因此您可以自由地以您想要的方式构建代码。</p></blockquote></li><li><p>[<a href="https://github.com/Jack-Cherish/python-spider" target="_blank" rel="noopener">python-spider</a>]</p><blockquote><p>Python3网络爬虫实战：VIP视频破解助手；GEETEST验证码破解；小说、动漫下载；手机APP爬取；财务报表入库；火车票抢票；抖音APP视频下载；百万英雄辅助；网易云音乐下载；B站视频和弹幕下载</p></blockquote></li><li><p>[<a href="https://github.com/zmrenwu/django-blog-tutorial" target="_blank" rel="noopener">django-blog-tutorial</a>]</p><blockquote><p>免费、中文、零基础，完整的项目，基于最新版 Django 1.10 和 Python 3.5。带你从零开始一步步开发属于自己的博客网站，帮助你以最快的速度掌握 Django 开发的技巧。</p></blockquote></li><li><p>[<a href="https://github.com/horst3180/arc-theme" target="_blank" rel="noopener">arc-theme</a>]</p><blockquote><p>Arc是一个平面主题，具有透明元素，适用于GTK 3，GTK 2和GNOME Shell，支持基于GTK 3和GTK 2的桌面环境，如GNOME，Unity，Budgie，Pantheon，Xfce，MATE等。(Ubuntu)</p></blockquote><blockquote><p><img src="arc_theme.png" alt="SPADE"></p></blockquote></li><li><p>[<a href="[test](https://github.com/vipshop/vjtools)">vjtools</a>]</p><blockquote><p>vip.com的java编码标准，库和工具</p></blockquote></li><li><p>[<a href="https://github.com/jaywcjlove/awesome-mac/blob/master/README-zh.md" target="_blank" rel="noopener">awesome-mac</a>]</p><blockquote><p>收集各种类别非常好用的 Mac 应用程序、软件以及工具。</p></blockquote></li></ul><ul><li>[<a href="https://github.com/halo-dev/halo" target="_blank" rel="noopener">halo</a>]<blockquote><p>Halo 可能是最好的 Java 博客系统</p></blockquote></li></ul><ul><li><p>[<a href="https://github.com/wszqkzqk/deepin-wine-ubuntu" target="_blank" rel="noopener">deepin-wine-ubuntu</a>]</p><blockquote><p>Deepin-wine 环境的 Ubuntu 移植版(可以安装QQ，TIM，百度云)</p></blockquote></li><li><p>[<a href="https://github.com/balancap/SSD-Tensorflow" target="_blank" rel="noopener">SSD-Tensorflow</a>]</p><blockquote><p>TensorFlow中的单发多盒检测器</p></blockquote></li><li><p>[<a href="https://github.com/blaze/odo" target="_blank" rel="noopener">odo</a>]</p><blockquote><p>Odo migrates data between different containers</p></blockquote></li><li><p>[<a href="https://github.com/blaze/blaze" target="_blank" rel="noopener">blaze</a>]</p><blockquote><p>Blaze将修改后的NumPy和Pandas类语法的子集转换为数据库和其他计算系统。 Blaze允许Python用户使用熟悉的界面来查询其他数据存储系统中的数据。</p></blockquote></li></ul><hr><h2 id="没有什么用的工具"><a href="#没有什么用的工具" class="headerlink" title="没有什么用的工具"></a>没有什么用的工具</h2><ul><li><p>[<a href="https://github.com/my8100/scrapydweb/blob/master/README_CN.md" target="_blank" rel="noopener">scrapydweb</a>]</p><blockquote><p>ScrapydWeb：用于 Scrapyd 集群管理的web应用，支持 Scrapy 日志分析和可视化。</p></blockquote></li><li><p>[<a href="https://github.com/drone/drone" target="_blank" rel="noopener">drone</a>]</p><blockquote><p>Drone是一个面向繁忙开发团队的自助式持续交付平台。</p></blockquote></li><li><p>[<a href="https://github.com/unbug/codelf" target="_blank" rel="noopener">codelf</a>]</p><blockquote><p>搜索来自Github，Bitbucket，Google Code，Codeplex，Sourceforge，Fedora Project，GitLab的项目，以查找真实世界的用法变量名称(现在不能用)。</p></blockquote></li><li><p>[<a href="https://github.com/looly/hutool" target="_blank" rel="noopener">hutool</a>]</p><blockquote><p>Hutool是一个Java工具包，也只是一个工具包，它帮助我们简化每一行代码，减少每一个方法，让Java语言也可以“甜甜的”。Hutool最初是我项目中“util”包的一个整理，后来慢慢积累并加入更多非业务相关功能，并广泛学习其它开源项目精髓，经过自己整理修改，最终形成丰富的开源工具集。</p></blockquote></li><li><p>[<a href="https://github.com/LinShunKang/MyPerf4J" target="_blank" rel="noopener">MyPerf4J</a>]</p><blockquote><p>一个针对高并发、低延迟应用设计的高性能 Java 性能监控和统计工具。</p></blockquote><img src="/2018/02/04/管理github的star项目/MyPerf4J.gif" title="MyPerf4J"></li><li><p>[<a href="https://github.com/dreamhead/moco" target="_blank" rel="noopener">moco</a>]</p><blockquote><p>Moco是一个简单的安装存根框架。</p></blockquote></li><li><p>[<a href="https://github.com/oldmanpushcart/greys-anatomy" target="_blank" rel="noopener">greys-anatomy</a>]</p><blockquote><p>线上系统为何经常出错？数据库为何屡遭黑手？业务调用为何频频失败？连环异常堆栈案，究竟是哪次调用所为？ 数百台服务器意外雪崩背后又隐藏着什么？是软件的扭曲还是硬件的沦丧？ 走进科学带你了解Greys, Java线上问题诊断工具。</p></blockquote></li><li><p>[<a href="https://github.com/filebrowser/filebrowser" target="_blank" rel="noopener">filebrowser</a>]</p><blockquote><p>Web文件浏览器，可用作中间件或独立应用程序。</p></blockquote></li><li><p>[<a href="https://github.com/cosven/FeelUOwn" target="_blank" rel="noopener">FeelUOwn</a>]</p><blockquote><p>FeelUOwn 是一个符合 Unix 哲学的跨平台的音乐播放器，主要面向 Linux/macOS 用户。</p></blockquote><blockquote><p><img src="FeelUOwn.png" alt="FeelUOwn"></p></blockquote></li><li><p>[<a href="https://github.com/cloudera/hue" target="_blank" rel="noopener">hue</a>]</p><blockquote><p>Hue是一个开源SQL Workbench，用于在云/本地数据仓库中浏览，查询和可视化数据：gethue.com</p></blockquote></li></ul><ul><li><p>[<a href="https://github.com/jesseduffield/lazygit" target="_blank" rel="noopener">lazygit</a>]</p><blockquote><p>git命令的简单终端UI</p></blockquote></li><li><p>[<a href="https://github.com/worldveil/dejavu" target="_blank" rel="noopener">dejavu</a>]</p><blockquote><p>Dejavu可以通过聆听音频并对其进行指纹识别来记忆音频。然后，通过播放歌曲和录制麦克风输入，Dejavu尝试将音频与数据库中保存的指纹进行匹配，然后返回正在播放的歌曲。</p></blockquote></li><li><p>[<a href="https://github.com/b3log/baidu-netdisk-downloaderx" target="_blank" rel="noopener">baidu-netdisk-downloaderx</a>]</p><blockquote><p>百度网盘不限速下载器 BND，支持 Windows、Mac 和 Linux。</p></blockquote></li><li><p>[<a href="https://github.com/BoostIO/Boostnote" target="_blank" rel="noopener">Boostnote</a>]</p><blockquote><p>适用于Mac，Windows和Linux的开发人员的markdown编辑器</p></blockquote></li></ul><hr><h2 id="看不懂的操作"><a href="#看不懂的操作" class="headerlink" title="看不懂的操作"></a>看不懂的操作</h2><ul><li><p>[<a href="https://github.com/laskfla/BuildOpenJDK9-on-Mojave" target="_blank" rel="noopener">BuildOpenJDK9-on-Mojave</a>]</p><blockquote><p>从源代码在Mac Mojave（10.14.1）上构建OpenJDK9(在10.13上面也可以)。</p></blockquote></li><li><p>[<a href="https://github.com/ruanyf/document-style-guide" target="_blank" rel="noopener">document-style-guide</a>]</p><blockquote><p>中文技术文档的写作规范</p></blockquote></li><li><p>[<a href="https://github.com/shieldfy/API-Security-Checklist/blob/master/README-zh.md" target="_blank" rel="noopener">API-Security-Checklist</a>]</p><blockquote><p>开发安全的 API 所需要核对的清单</p></blockquote></li><li><p>[<a href="https://github.com/knightliao/disconf" target="_blank" rel="noopener">disconf</a>]</p><blockquote><p>Distributed Configuration Management Platform(分布式配置管理平台)<br>专注于各种「分布式系统配置管理」的「通用组件」和「通用平台」, 提供统一的「配置管理服务」</p></blockquote></li></ul><hr><h2 id="books"><a href="#books" class="headerlink" title="books"></a>books</h2><ul><li><p>[<a href="https://github.com/ruanyf/es6tutorial" target="_blank" rel="noopener">es6tutorial</a>]</p><blockquote><p>《ECMAScript 6 入门》是一本开源的 JavaScript 语言教程，全面介绍 ECMAScript 6 新引入的语法特性。</p></blockquote><blockquote><p> <img src="es6tutorial.jpg" alt="es6tutorial"></p></blockquote></li><li><p>[<a href="https://github.com/fengdu78/deeplearning_ai_books" target="_blank" rel="noopener">deeplearning_ai_books</a>]</p><blockquote><p>deeplearning.ai（吴恩达老师的深度学习课程笔记及资源）</p></blockquote></li><li><p>[<a href="https://github.com/oldratlee/translations" target="_blank" rel="noopener">translations</a>]</p><blockquote><p>一些不错英文资料的中文翻译。</p></blockquote></li><li><p>[<a href="https://github.com/selfteaching/the-craft-of-selfteaching" target="_blank" rel="noopener">the-craft-of-selfteaching</a>]</p><blockquote><p>没有自学能力的人没有未来。</p></blockquote></li><li><p>[<a href="https://github.com/sohutv/cachecloud" target="_blank" rel="noopener">cachecloud</a>]</p><blockquote><p>CacheCloud团队于2017年3月出版实体书《Redis开发与运维》</p></blockquote></li><li><p>[<a href="https://github.com/d2l-ai/d2l-zh" target="_blank" rel="noopener">d2l-zh</a>]</p><blockquote><p>《动手学深度学习》，英文版即伯克利深度学习（STAT 157，2019春）教材。面向中文读者、能运行、可讨论。</p></blockquote></li><li><p>[<a href="https://github.com/antirez/redis" target="_blank" rel="noopener">redis</a>]</p><blockquote><p>本自述文件只是一个快速入门的快速文档。您可以在redis.io上找到更详细的文档。</p></blockquote></li></ul><hr><h2 id="papers"><a href="#papers" class="headerlink" title="papers"></a>papers</h2><ul><li><p>[<a href="https://github.com/robi56/Deep-Learning-for-Recommendation-Systems" target="_blank" rel="noopener">Deep-Learning-for-Recommendation-Systems</a>]</p><blockquote><p>此存储库包含基于深度学习的文章，推荐系统的纸张和存储库</p></blockquote></li><li><p>[<a href="https://github.com/fengdu78/Coursera-ML-AndrewNg-Notes" target="_blank" rel="noopener">Coursera-ML-AndrewNg-Notes</a>]</p><blockquote><p>吴恩达老师的机器学习课程个人笔记</p></blockquote></li><li><p>[<a href="https://github.com/thunlp/GNNPapers" target="_blank" rel="noopener">GNNPapers</a>]</p><blockquote><p>必读的GNN论文。</p></blockquote></li><li><p>[<a href="https://github.com/ZJULearning/time_lstm" target="_blank" rel="noopener">time_lstm</a>]</p><blockquote><p>This project is the implementation of the paper “What to Do Next: Modeling User Behaviors by Time-LSTM”.</p></blockquote></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
